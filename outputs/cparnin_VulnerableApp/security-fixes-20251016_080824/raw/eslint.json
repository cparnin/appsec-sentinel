[{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":10,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":10,"endColumn":14,"fix":{"range":[356,396],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":10,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":14,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToFetchData() {\n  document\n    .getElementById(\"fetchDetails\")\n    .addEventListener(\"click\", function () {\n      /**\n       * getUrlForVulnerabilityLevel() method provides url to call the Vulnerability Level\n       * of Sample Vulnerability.\n       * e.g. /VulnerableApp/SampleVulnerability/LEVEL_1 for LEVEL_1\n       */\n      let url = getUrlForVulnerabilityLevel();\n      /**\n       * doGetAjaxCall() method is used to do the ajax get call to the Vulnerability Level\n       */\n      doGetAjaxCall(fetchDataCallback, url + \"?name=dummyInput\", true);\n    });\n}\n// Used to register event on the button or any other component\naddingEventListenerToFetchData();\n\n//Callback function to handle the response and render in the UI\nfunction fetchDataCallback(data) {\n  document.getElementById(\"response\").innerHTML = data.content;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":5,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":5,"endColumn":14,"fix":{"range":[162,202],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":6,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToFetchCarInfoButton() {\n  document\n    .getElementById(\"checkIfCarPresentButton\")\n    .addEventListener(\"click\", function () {\n      let url = getUrlForVulnerabilityLevel();\n      doGetAjaxCall(\n        fetchCarInfoCallBack,\n        url + \"?id=\" + document.getElementById(\"carId\").value,\n        true\n      );\n    });\n}\naddingEventListenerToFetchCarInfoButton();\n\nfunction fetchCarInfoCallBack(data) {\n  if (data.isCarPresent) {\n    document.getElementById(\"carInformation\").innerHTML =\n      \"<div>Car is Present</div>\";\n  } else {\n    document.getElementById(\"carInformation\").innerHTML =\n      \"<div>Car is not Present</div>\";\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":12,"fix":{"range":[126,166],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":4,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToPingButton() {\n  document.getElementById(\"pingBtn\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(\n      pingUtilityCallback,\n      url + \"?ipaddress=\" + document.getElementById(\"ipaddress\").value,\n      true\n    );\n  });\n}\naddingEventListenerToPingButton();\n\nfunction pingUtilityCallback(data) {\n  document.getElementById(\"pingUtilityResponse\").innerHTML = data.content;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":5,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":5,"endColumn":14,"fix":{"range":[158,198],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":6,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToFetchCarInfoButton() {\n  document\n    .getElementById(\"fetchCarImageButton\")\n    .addEventListener(\"click\", function () {\n      let url = getUrlForVulnerabilityLevel();\n      doGetAjaxCall(\n        fetchCarInfoCallBack,\n        url + \"?id=\" + document.getElementById(\"carId\").value,\n        true\n      );\n    });\n}\naddingEventListenerToFetchCarInfoButton();\n\nfunction fetchCarInfoCallBack(data) {\n  if (data.isCarPresent) {\n    document.getElementById(\"carInformation\").innerHTML =\n      \"<img src='\" + data.carInformation.imagePath + \"' width='900'/>\";\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'placeholderAnchorElement' is never reassigned. Use 'const' instead.","line":2,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":31,"fix":{"range":[36,106],"text":"const placeholderAnchorElement = document.getElementById(\"placeholder\");"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":10,"fix":{"range":[109,140],"text":"const url = window.location.href;"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":6,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":9,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"function updatePlaceholderDiv() {\n  let placeholderAnchorElement = document.getElementById(\"placeholder\");\n  let url = window.location.href;\n  if (url.endsWith(\"/VulnerableApp/\")) {\n    placeholderAnchorElement.href =\n      getUrlForVulnerabilityLevel() + \"?returnTo=/VulnerableApp/\";\n  } else {\n    placeholderAnchorElement.href =\n      getUrlForVulnerabilityLevel() + \"?returnTo=/\";\n  }\n  placeholderAnchorElement.innerText = \"Click here\";\n}\n\nupdatePlaceholderDiv();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":5,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":12,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":16,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"function addingEventListenerToFetchTokenButton() {\n  document\n    .getElementById(\"fetchTokenButton\")\n    .addEventListener(\"click\", function () {\n      doGetAjaxCall(fetchTokenCallBack, getUrlForVulnerabilityLevel(), true);\n    });\n}\naddingEventListenerToFetchTokenButton();\n\nfunction addingEventListenerToVerifyToken() {\n  document.getElementById(\"verifyToken\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    url = url + \"?JWT=\" + document.getElementById(\"jwt\").value;\n    console.log(url);\n    console.log(document.getElementById(\"jwt\").value);\n    doGetAjaxCall(updateUIWithVerifyResponse, url, true);\n  });\n}\naddingEventListenerToVerifyToken();\n\nfunction updateUIWithVerifyResponse(data) {\n  if (data.isValid) {\n    document.getElementById(\"verificationResponse\").innerHTML = \"JWT is valid\";\n  } else {\n    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";\n  }\n}\n\nfunction fetchTokenCallBack(data) {\n  document.getElementById(\"jwt\").value = data.content;\n  document.getElementById(\"description\").style.visibility = \"visible\";\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":7,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":20},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":14,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":14,"endColumn":12,"fix":{"range":[462,502],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":14,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":15,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToFetchTokenButton() {\n  document\n    .getElementById(\"fetchTokenButton\")\n    .addEventListener(\"click\", function () {\n      let url = getUrlForVulnerabilityLevel();\n      url = url + \"?fetch=true\";\n      doGetAjaxCall(fetchTokenCallBack, url, true);\n    });\n}\naddingEventListenerToFetchTokenButton();\n\nfunction addingEventListenerToVerifyToken() {\n  document.getElementById(\"verifyToken\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(updateUIWithVerifyResponse, url, true);\n  });\n}\naddingEventListenerToVerifyToken();\n\nfunction updateUIWithVerifyResponse(data) {\n  if (data.isValid) {\n    document.getElementById(\"verificationResponse\").innerHTML = \"JWT is valid\";\n  } else {\n    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";\n  }\n}\n\nfunction fetchTokenCallBack(data) {\n  document.getElementById(\"jwt\").innerHTML = data.content;\n  document.getElementById(\"description\").style.visibility = \"visible\";\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":44},{"ruleId":"prefer-const","severity":1,"message":"'xmlHttpRequest' is never reassigned. Use 'const' instead.","line":7,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":7,"endColumn":25,"fix":{"range":[233,303],"text":"const xmlHttpRequest = getXMLHttpRequest(fetchTokenCallBack, url, true);"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":15,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":15,"endColumn":12,"fix":{"range":[516,556],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":15,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":42},{"ruleId":"prefer-const","severity":1,"message":"'xmlHttpRequest' is never reassigned. Use 'const' instead.","line":16,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":16,"endColumn":23,"fix":{"range":[561,663],"text":"const xmlHttpRequest = getXMLHttpRequest(\n      updateUIWithVerifyResponse,\n      url,\n      true\n    );"}},{"ruleId":"prefer-const","severity":1,"message":"'xmlHttpRequest' is never reassigned. Use 'const' instead.","line":46,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":46,"endColumn":21,"fix":{"range":[1368,1410],"text":"const xmlHttpRequest = new XMLHttpRequest();"}},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":46,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'genericResponseHandler' is not defined.","line":48,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"function addingEventListenerToFetchTokenButton() {\n  document\n    .getElementById(\"fetchTokenButton\")\n    .addEventListener(\"click\", function () {\n      let url = getUrlForVulnerabilityLevel();\n      url = url + \"?fetch=true\";\n      let xmlHttpRequest = getXMLHttpRequest(fetchTokenCallBack, url, true);\n      xmlHttpRequest.send();\n    });\n}\naddingEventListenerToFetchTokenButton();\n\nfunction addingEventListenerToVerifyToken() {\n  document.getElementById(\"verifyToken\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    let xmlHttpRequest = getXMLHttpRequest(\n      updateUIWithVerifyResponse,\n      url,\n      true\n    );\n    xmlHttpRequest.setRequestHeader(\n      \"Authorization\",\n      document.getElementById(\"jwt\").innerText\n    );\n    xmlHttpRequest.send();\n  });\n}\n\naddingEventListenerToVerifyToken();\n\nfunction updateUIWithVerifyResponse(data) {\n  if (data.isValid) {\n    document.getElementById(\"verificationResponse\").innerHTML = \"JWT is valid\";\n  } else {\n    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";\n  }\n}\n\nfunction fetchTokenCallBack(data) {\n  document.getElementById(\"jwt\").innerHTML = data.content;\n  document.getElementById(\"description\").style.visibility = \"visible\";\n}\n\nfunction getXMLHttpRequest(callBack, url, isJson) {\n  let xmlHttpRequest = new XMLHttpRequest();\n  xmlHttpRequest.onreadystatechange = function () {\n    genericResponseHandler(xmlHttpRequest, callBack, isJson);\n  };\n  xmlHttpRequest.open(\"GET\", url, true);\n  xmlHttpRequest.setRequestHeader(\n    \"Content-Type\",\n    isJson ? \"application/json\" : \"text/html\"\n  );\n  return xmlHttpRequest;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'placeholderAnchorElement' is never reassigned. Use 'const' instead.","line":2,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":31,"fix":{"range":[36,106],"text":"const placeholderAnchorElement = document.getElementById(\"placeholder\");"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function updatePlaceholderDiv() {\n  let placeholderAnchorElement = document.getElementById(\"placeholder\");\n  placeholderAnchorElement.href = getUrlForVulnerabilityLevel() + \"?returnTo=/\";\n  placeholderAnchorElement.innerText = \"Click here\";\n}\n\nupdatePlaceholderDiv();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":12,"fix":{"range":[134,174],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":4,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18},{"ruleId":"prefer-const","severity":1,"message":"'content' is never reassigned. Use 'const' instead.","line":16,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":16,"endColumn":16,"fix":{"range":[480,519],"text":"const content = JSON.parse(data.content);"}},{"ruleId":"prefer-const","severity":1,"message":"'key' is never reassigned. Use 'const' instead.","line":18,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":18,"endColumn":19,"fix":{"range":[561,568],"text":"const key"}},{"ruleId":"prefer-const","severity":1,"message":"'index' is never reassigned. Use 'const' instead.","line":23,"column":14,"nodeType":"Identifier","messageId":"useConst","endLine":23,"endColumn":19,"fix":{"range":[705,714],"text":"const index"}},{"ruleId":"prefer-const","severity":1,"message":"'key' is never reassigned. Use 'const' instead.","line":25,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":25,"endColumn":19,"fix":{"range":[802,809],"text":"const key"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"function addingEventListenerToLoadImageButton() {\n  document.getElementById(\"loadButton\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(\n      appendResponseCallback,\n      url + \"?fileName=\" + document.getElementById(\"fileName\").value,\n      true\n    );\n  });\n}\naddingEventListenerToLoadImageButton();\n\nfunction appendResponseCallback(data) {\n  if (data.isValid) {\n    let tableInformation = '<table id=\"InfoTable\">';\n    let content = JSON.parse(data.content);\n    if (content.length > 0) {\n      for (let key in content[0]) {\n        tableInformation =\n          tableInformation + '<th id=\"InfoColumn\">' + key + \"</th>\";\n      }\n    }\n    for (let index in content) {\n      tableInformation = tableInformation + '<tr id=\"Info\">';\n      for (let key in content[index]) {\n        tableInformation =\n          tableInformation +\n          '<td id=\"InfoColumn\">' +\n          content[index][key] +\n          \"</td>\";\n      }\n      tableInformation = tableInformation + \"</tr>\";\n    }\n    tableInformation = tableInformation + \"</table>\";\n    document.getElementById(\"Information\").innerHTML = tableInformation;\n  } else {\n    document.getElementById(\"Information\").innerHTML = \"Unable to Load Users\";\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'load' is never reassigned. Use 'const' instead.","line":1,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":1,"endColumn":9,"fix":{"range":[0,265],"text":"const load = function () {\n  let url = getUrlForVulnerabilityLevel();\n  doGetAjaxCall(\n    appendResponseCallback,\n    document.getElementById(\"yourComment\").value\n      ? url + \"?comment=\" + document.getElementById(\"yourComment\").value\n      : url,\n    false\n  );\n};"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":2,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":2,"endColumn":10,"fix":{"range":[27,67],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":2,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":3,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'appendComment' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"appendComment"},"fix":{"range":[387,515],"text":""},"desc":"Remove unused variable 'appendComment'."}]},{"ruleId":"no-undef","severity":2,"message":"'postDiv' is not defined.","line":17,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'postDiv' is not defined.","line":18,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":58}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"let load = function () {\n  let url = getUrlForVulnerabilityLevel();\n  doGetAjaxCall(\n    appendResponseCallback,\n    document.getElementById(\"yourComment\").value\n      ? url + \"?comment=\" + document.getElementById(\"yourComment\").value\n      : url,\n    false\n  );\n};\n\nfunction addingEventListenerToLoadImageButton() {\n  document.getElementById(\"post\").addEventListener(\"click\", load);\n}\n\nfunction appendComment(post) {\n  postDiv.innerHTML = post.content;\n  document.getElementById(\"allPosts\").appendChild(postDiv);\n}\n\nfunction appendResponseCallback(data) {\n  document.getElementById(\"allPosts\").innerHTML = data;\n}\n\nload();\naddingEventListenerToLoadImageButton();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'projectNameAndUrls' is never reassigned. Use 'const' instead.","line":5,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":5,"endColumn":27,"fix":{"range":[84,134],"text":"const projectNameAndUrls = JSON.parse(data.content);"}},{"ruleId":"prefer-const","severity":1,"message":"'key' is never reassigned. Use 'const' instead.","line":8,"column":16,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":19,"fix":{"range":[240,247],"text":"const key"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":32,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":32,"endColumn":10,"fix":{"range":[928,968],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":32,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":33,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"getData();\n\nfunction setDataInProjectsResponseDiv(data) {\n  if (data.isValid) {\n    let projectNameAndUrls = JSON.parse(data.content);\n    let tableInformation = '<table id=\"InfoTable\">';\n    if (projectNameAndUrls.length > 0) {\n      for (let key in projectNameAndUrls[0]) {\n        tableInformation =\n          tableInformation + '<th class=\"InfoColumn\">' + key + \"</th>\";\n      }\n    }\n\n    projectNameAndUrls.forEach((projNameAndUrl) => {\n      tableInformation =\n        tableInformation +\n        \"<tr><td class='InfoColumn'>\" +\n        projNameAndUrl.name +\n        \"</td><td class='InfoColumn'>\" +\n        projNameAndUrl.url +\n        \"</td></tr>\";\n    });\n    tableInformation = tableInformation + \"</tr>\";\n    document.getElementById(\"projectsResponse\").innerHTML = tableInformation;\n  } else {\n    document.getElementById(\"projectsResponse\").innerHTML =\n      \"Unable to load projects\";\n  }\n}\n\nfunction getData() {\n  let url = getUrlForVulnerabilityLevel();\n  doGetAjaxCall(\n    setDataInProjectsResponseDiv,\n    url +\n      \"?fileurl=https://gist.githubusercontent.com/raw/bbf2e2183b8f6252061663ce0ddee79b\",\n    true\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":5,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":5,"endColumn":14,"fix":{"range":[158,198],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":5,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":6,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToFetchCarInfoButton() {\n  document\n    .getElementById(\"fetchCarImageButton\")\n    .addEventListener(\"click\", function () {\n      let url = getUrlForVulnerabilityLevel();\n      doGetAjaxCall(\n        fetchCarInfoCallBack,\n        url + \"?id=\" + document.getElementById(\"carId\").value,\n        true\n      );\n    });\n}\naddingEventListenerToFetchCarInfoButton();\n\nfunction fetchCarInfoCallBack(data) {\n  document.getElementById(\"carInformation\").innerHTML =\n    \"<img src='\" + data.imagePath + \"' width='900'/>\";\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":48,"fix":{"range":[126,129],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":4,"endColumn":30,"fix":{"range":[174,177],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":5,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":5,"endColumn":35,"fix":{"range":[204,207],"text":"let"}},{"ruleId":"no-undef","severity":2,"message":"'FormData' is not defined.","line":5,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":32},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":7,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":7,"endColumn":12,"fix":{"range":[274,314],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":7,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doPostAjaxCall' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"function addingEventListenerToUploadImage() {\n  document.getElementById(\"upload\").addEventListener(\"click\", function () {\n    var form = document.getElementById(\"file\");\n    var file = form.files[0];\n    var formData = new FormData();\n    formData.append(\"file\", file);\n    let url = getUrlForVulnerabilityLevel();\n    doPostAjaxCall(uploadImage, url, true, formData);\n  });\n}\naddingEventListenerToUploadImage();\n\nfunction uploadImage(data) {\n  document.getElementById(\"uploaded_file_info\").innerHTML = data.isValid\n    ? \"File uploaded at location:\" + data.content\n    : data.content;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":12,"fix":{"range":[133,173],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":4,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToLoadImageButton() {\n  document.getElementById(\"loadImage\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(\n      appendResponseCallback,\n      url +\n        \"?src=/VulnerableApp/images/\" +\n        document.getElementById(\"images\").value,\n      false\n    );\n  });\n}\naddingEventListenerToLoadImageButton();\n\nfunction appendResponseCallback(data) {\n  document.getElementById(\"image\").innerHTML = data;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":12,"fix":{"range":[130,170],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":4,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":14,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":14,"endColumn":68,"fix":{"range":[398,401],"text":"let"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"function addingEventListenerToLoadImageButton() {\n  document.getElementById(\"submit\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(\n      appendResponseCallback,\n      url + \"?value=\" + document.getElementById(\"textInput\").value,\n      false\n    );\n  });\n}\naddingEventListenerToLoadImageButton();\n\nfunction appendResponseCallback(data) {\n  var parentContainer = document.getElementById(\"parentContainer\");\n  parentContainer.innerHTML = data;\n  if (parentContainer.childNodes.length > 0) {\n    parentContainer.childNodes[0].classList.add(\n      document.getElementById(\"fonts\").value\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":3,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":3,"endColumn":12,"fix":{"range":[133,173],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":3,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'doGetAjaxCall' is not defined.","line":4,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"function addingEventListenerToLoadImageButton() {\n  document.getElementById(\"loadImage\").addEventListener(\"click\", function () {\n    let url = getUrlForVulnerabilityLevel();\n    doGetAjaxCall(\n      appendResponseCallback,\n      url + \"?value=images/\" + document.getElementById(\"images\").value,\n      false\n    );\n  });\n}\naddingEventListenerToLoadImageButton();\n\nfunction appendResponseCallback(data) {\n  document.getElementById(\"image\").innerHTML = data;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'buildXmlRequest' is never reassigned. Use 'const' instead.","line":8,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":8,"endColumn":20,"fix":{"range":[206,1258],"text":"const buildXmlRequest = function (\n  bookName,\n  author,\n  isbn,\n  publisher,\n  otherComments\n) {\n  let xmlRequestDocument = document.implementation.createDocument(\"\", \"\", null);\n  let bookElement = xmlRequestDocument.createElement(\"book\");\n  let bookNameElement = xmlRequestDocument.createElement(\"name\");\n  bookNameElement.innerHTML = bookName;\n  bookElement.appendChild(bookNameElement);\n\n  let authorElement = xmlRequestDocument.createElement(\"author\");\n  authorElement.innerHTML = author;\n  bookElement.appendChild(authorElement);\n\n  let isbnElement = xmlRequestDocument.createElement(\"isbn\");\n  isbnElement.innerHTML = isbn;\n  bookElement.appendChild(isbnElement);\n\n  let publisherElement = xmlRequestDocument.createElement(\"publisher\");\n  publisherElement.innerHTML = publisher;\n  bookElement.appendChild(publisherElement);\n\n  let otherElement = xmlRequestDocument.createElement(\"others\");\n  otherElement.innerHTML = otherComments;\n  bookElement.appendChild(otherElement);\n\n  xmlRequestDocument.append(bookElement);\n  return xmlRequestDocument;\n};"}},{"ruleId":"prefer-const","severity":1,"message":"'xmlRequestDocument' is never reassigned. Use 'const' instead.","line":15,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":15,"endColumn":25,"fix":{"range":[304,382],"text":"const xmlRequestDocument = document.implementation.createDocument(\"\", \"\", null);"}},{"ruleId":"prefer-const","severity":1,"message":"'bookElement' is never reassigned. Use 'const' instead.","line":16,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":16,"endColumn":18,"fix":{"range":[385,444],"text":"const bookElement = xmlRequestDocument.createElement(\"book\");"}},{"ruleId":"prefer-const","severity":1,"message":"'bookNameElement' is never reassigned. Use 'const' instead.","line":17,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":17,"endColumn":22,"fix":{"range":[447,510],"text":"const bookNameElement = xmlRequestDocument.createElement(\"name\");"}},{"ruleId":"prefer-const","severity":1,"message":"'authorElement' is never reassigned. Use 'const' instead.","line":21,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":21,"endColumn":20,"fix":{"range":[598,661],"text":"const authorElement = xmlRequestDocument.createElement(\"author\");"}},{"ruleId":"prefer-const","severity":1,"message":"'isbnElement' is never reassigned. Use 'const' instead.","line":25,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":25,"endColumn":18,"fix":{"range":[743,802],"text":"const isbnElement = xmlRequestDocument.createElement(\"isbn\");"}},{"ruleId":"prefer-const","severity":1,"message":"'publisherElement' is never reassigned. Use 'const' instead.","line":29,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":29,"endColumn":23,"fix":{"range":[878,947],"text":"const publisherElement = xmlRequestDocument.createElement(\"publisher\");"}},{"ruleId":"prefer-const","severity":1,"message":"'otherElement' is never reassigned. Use 'const' instead.","line":33,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":33,"endColumn":19,"fix":{"range":[1038,1100],"text":"const otherElement = xmlRequestDocument.createElement(\"others\");"}},{"ruleId":"prefer-const","severity":1,"message":"'load' is never reassigned. Use 'const' instead.","line":56,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":56,"endColumn":9,"fix":{"range":[1656,2183],"text":"const load = function () {\n  let url = getUrlForVulnerabilityLevel();\n  let bookName = document.getElementById(\"name\").value;\n  let author = document.getElementById(\"author\").value;\n  let isbn = document.getElementById(\"isbn\").value;\n  let publisher = document.getElementById(\"publisher\").value;\n  let otherComments = document.getElementById(\"otherComments\").value;\n  let xmlRequest = buildXmlRequest(\n    bookName,\n    author,\n    isbn,\n    publisher,\n    otherComments\n  );\n  doPostAjaxCall(callback, url, true, xmlRequest);\n};"}},{"ruleId":"prefer-const","severity":1,"message":"'url' is never reassigned. Use 'const' instead.","line":57,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":57,"endColumn":10,"fix":{"range":[1683,1723],"text":"const url = getUrlForVulnerabilityLevel();"}},{"ruleId":"no-undef","severity":2,"message":"'getUrlForVulnerabilityLevel' is not defined.","line":57,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":40},{"ruleId":"prefer-const","severity":1,"message":"'bookName' is never reassigned. Use 'const' instead.","line":58,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":58,"endColumn":15,"fix":{"range":[1726,1779],"text":"const bookName = document.getElementById(\"name\").value;"}},{"ruleId":"prefer-const","severity":1,"message":"'author' is never reassigned. Use 'const' instead.","line":59,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":59,"endColumn":13,"fix":{"range":[1782,1835],"text":"const author = document.getElementById(\"author\").value;"}},{"ruleId":"prefer-const","severity":1,"message":"'isbn' is never reassigned. Use 'const' instead.","line":60,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":60,"endColumn":11,"fix":{"range":[1838,1887],"text":"const isbn = document.getElementById(\"isbn\").value;"}},{"ruleId":"prefer-const","severity":1,"message":"'publisher' is never reassigned. Use 'const' instead.","line":61,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":61,"endColumn":16,"fix":{"range":[1890,1949],"text":"const publisher = document.getElementById(\"publisher\").value;"}},{"ruleId":"prefer-const","severity":1,"message":"'otherComments' is never reassigned. Use 'const' instead.","line":62,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":62,"endColumn":20,"fix":{"range":[1952,2019],"text":"const otherComments = document.getElementById(\"otherComments\").value;"}},{"ruleId":"prefer-const","severity":1,"message":"'xmlRequest' is never reassigned. Use 'const' instead.","line":63,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":63,"endColumn":17,"fix":{"range":[2022,2129],"text":"const xmlRequest = buildXmlRequest(\n    bookName,\n    author,\n    isbn,\n    publisher,\n    otherComments\n  );"}},{"ruleId":"no-undef","severity":2,"message":"'doPostAjaxCall' is not defined.","line":70,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":70,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'appendResponseCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"appendResponseCallback"},"fix":{"range":[2291,2395],"text":""},"desc":"Remove unused variable 'appendResponseCallback'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":16,"source":"/**\n * Api to build the XML Request.\n *\n * TODO In case we add more XML based vulnerabilities\n * we will make this Api more generic by building it on Map/Json\n * and also move this to Vulnerability.js.\n */\nlet buildXmlRequest = function (\n  bookName,\n  author,\n  isbn,\n  publisher,\n  otherComments\n) {\n  let xmlRequestDocument = document.implementation.createDocument(\"\", \"\", null);\n  let bookElement = xmlRequestDocument.createElement(\"book\");\n  let bookNameElement = xmlRequestDocument.createElement(\"name\");\n  bookNameElement.innerHTML = bookName;\n  bookElement.appendChild(bookNameElement);\n\n  let authorElement = xmlRequestDocument.createElement(\"author\");\n  authorElement.innerHTML = author;\n  bookElement.appendChild(authorElement);\n\n  let isbnElement = xmlRequestDocument.createElement(\"isbn\");\n  isbnElement.innerHTML = isbn;\n  bookElement.appendChild(isbnElement);\n\n  let publisherElement = xmlRequestDocument.createElement(\"publisher\");\n  publisherElement.innerHTML = publisher;\n  bookElement.appendChild(publisherElement);\n\n  let otherElement = xmlRequestDocument.createElement(\"others\");\n  otherElement.innerHTML = otherComments;\n  bookElement.appendChild(otherElement);\n\n  xmlRequestDocument.append(bookElement);\n  return xmlRequestDocument;\n};\n\nfunction callback(data) {\n  document.getElementById(\"bookInformation\").innerText = data.isValid\n    ? \"Book Details:  \\n Name - \" +\n      data.content.name +\n      \"\\n ISBN - \" +\n      data.content.isbn +\n      \"\\n Author - \" +\n      data.content.author +\n      \"\\n Publisher - \" +\n      data.content.publisher +\n      \"\\n Other information - \" +\n      data.content.others\n    : data.content;\n}\n\nlet load = function () {\n  let url = getUrlForVulnerabilityLevel();\n  let bookName = document.getElementById(\"name\").value;\n  let author = document.getElementById(\"author\").value;\n  let isbn = document.getElementById(\"isbn\").value;\n  let publisher = document.getElementById(\"publisher\").value;\n  let otherComments = document.getElementById(\"otherComments\").value;\n  let xmlRequest = buildXmlRequest(\n    bookName,\n    author,\n    isbn,\n    publisher,\n    otherComments\n  );\n  doPostAjaxCall(callback, url, true, xmlRequest);\n};\n\nfunction addingEventListener() {\n  document.getElementById(\"addBook\").addEventListener(\"click\", load);\n}\n\nfunction appendResponseCallback(data) {\n  document.getElementById(\"bookInformation\").innerHTML = data;\n}\n\naddingEventListener();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","messages":[{"ruleId":"prefer-const","severity":1,"message":"'dynamicScriptsElement' is never reassigned. Use 'const' instead.","line":18,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":18,"endColumn":28,"fix":{"range":[486,556],"text":"const dynamicScriptsElement = document.getElementById(\"dynamicScripts\");"}},{"ruleId":"prefer-const","severity":1,"message":"'cssElement' is never reassigned. Use 'const' instead.","line":19,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":19,"endColumn":17,"fix":{"range":[559,607],"text":"const cssElement = document.createElement(\"link\");"}},{"ruleId":"prefer-const","severity":1,"message":"'jsElement' is never reassigned. Use 'const' instead.","line":30,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":30,"endColumn":18,"fix":{"range":[1106,1155],"text":"const jsElement = document.createElement(\"script\");"}},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":44,"column":19,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":44,"endColumn":21,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1479,1481],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":44,"column":39,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":44,"endColumn":41,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1499,1501],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"prefer-const","severity":1,"message":"'htmlTemplate' is never reassigned. Use 'const' instead.","line":53,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":53,"endColumn":21,"fix":{"range":[1754,1870],"text":"const htmlTemplate =\n      vulnerableAppEndPointData[id][\"Detailed Information\"][key][\n        \"HtmlTemplate\"\n      ];"}},{"ruleId":"prefer-const","severity":1,"message":"'urlToFetchHtmlTemplate' is never reassigned. Use 'const' instead.","line":59,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":59,"endColumn":31,"fix":{"range":[1995,2134],"text":"const urlToFetchHtmlTemplate = htmlTemplate\n      ? \"/VulnerableApp/templates/\" + vulnerabilitySelected + \"/\" + htmlTemplate\n      : \"error\";"}},{"ruleId":"prefer-const","severity":1,"message":"'parentNodeWithAllDynamicScripts' is never reassigned. Use 'const' instead.","line":62,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":62,"endColumn":40,"fix":{"range":[2139,2231],"text":"const parentNodeWithAllDynamicScripts = document.getElementById(\n      \"dynamicScripts\"\n    );"}},{"ruleId":"prefer-const","severity":1,"message":"'svg' is never reassigned. Use 'const' instead.","line":83,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":83,"endColumn":10,"fix":{"range":[2897,2937],"text":"const svg = document.createElement(\"img\");"}},{"ruleId":"prefer-const","severity":1,"message":"'detailedInformation' is never reassigned. Use 'const' instead.","line":94,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":94,"endColumn":26,"fix":{"range":[3201,3257],"text":"const detailedInformation = detailedInformationArray[key];"}},{"ruleId":"prefer-const","severity":1,"message":"'isSecure' is never reassigned. Use 'const' instead.","line":95,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":95,"endColumn":15,"fix":{"range":[3260,3313],"text":"const isSecure = _isSecureVariant(detailedInformation);"}},{"ruleId":"prefer-const","severity":1,"message":"'column' is never reassigned. Use 'const' instead.","line":97,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":97,"endColumn":13,"fix":{"range":[3317,3360],"text":"const column = document.createElement(\"div\");"}},{"ruleId":"prefer-const","severity":1,"message":"'svgWithTooltip' is never reassigned. Use 'const' instead.","line":100,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":21,"fix":{"range":[3390,3441],"text":"const svgWithTooltip = document.createElement(\"div\");"}},{"ruleId":"prefer-const","severity":1,"message":"'span' is never reassigned. Use 'const' instead.","line":103,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":103,"endColumn":11,"fix":{"range":[3488,3530],"text":"const span = document.createElement(\"span\");"}},{"ruleId":"prefer-const","severity":1,"message":"'detailedInformationArray' is never reassigned. Use 'const' instead.","line":125,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":125,"endColumn":31,"fix":{"range":[4172,4261],"text":"const detailedInformationArray =\n    vulnerableAppEndPointData[id][\"Detailed Information\"];"}},{"ruleId":"prefer-const","severity":1,"message":"'key' is never reassigned. Use 'const' instead.","line":129,"column":12,"nodeType":"Identifier","messageId":"useConst","endLine":129,"endColumn":15,"fix":{"range":[4292,4299],"text":"const key"}},{"ruleId":"prefer-const","severity":1,"message":"'column' is never reassigned. Use 'const' instead.","line":133,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":133,"endColumn":15,"fix":{"range":[4414,4471],"text":"const column = createColumn(detailedInformationArray, key);"}},{"ruleId":"prefer-const","severity":1,"message":"'item' is never reassigned. Use 'const' instead.","line":188,"column":12,"nodeType":"Identifier","messageId":"useConst","endLine":188,"endColumn":16,"fix":{"range":[6157,6165],"text":"const item"}},{"ruleId":"no-unused-vars","severity":1,"message":"'back' is defined but never used. Allowed unused vars must match /^_/u.","line":210,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"back"},"fix":{"range":[6760,6840],"text":""},"desc":"Remove unused variable 'back'."}]},{"ruleId":"no-undef","severity":2,"message":"'clearSelected' is not defined.","line":212,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":212,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'getUrlForVulnerabilityLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":215,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUrlForVulnerabilityLevel"},"fix":{"range":[6842,6981],"text":""},"desc":"Remove unused variable 'getUrlForVulnerabilityLevel'."}]},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":222,"column":33,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":222,"endColumn":35,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[7083,7085],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":222,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":222,"endColumn":50},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":224,"column":31,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":224,"endColumn":33,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[7171,7173],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":224,"column":63,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":224,"endColumn":65,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[7203,7205],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":230,"column":38,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":230,"endColumn":40,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[7399,7401],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'alert' is not defined.","line":231,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":231,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'alert' is not defined.","line":233,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":233,"endColumn":12},{"ruleId":"prefer-const","severity":1,"message":"'xmlHttpRequest' is never reassigned. Use 'const' instead.","line":239,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":239,"endColumn":21,"fix":{"range":[7587,7629],"text":"const xmlHttpRequest = new XMLHttpRequest();"}},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":239,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":239,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'doPostAjaxCall' is defined but never used. Allowed unused vars must match /^_/u.","line":251,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":251,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"doPostAjaxCall"},"fix":{"range":[7924,8222],"text":""},"desc":"Remove unused variable 'doPostAjaxCall'."}]},{"ruleId":"prefer-const","severity":1,"message":"'xmlHttpRequest' is never reassigned. Use 'const' instead.","line":252,"column":7,"nodeType":"Identifier","messageId":"useConst","endLine":252,"endColumn":21,"fix":{"range":[7981,8023],"text":"const xmlHttpRequest = new XMLHttpRequest();"}},{"ruleId":"no-undef","severity":2,"message":"'XMLHttpRequest' is not defined.","line":252,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":252,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'generateMasterDetail' is defined but never used. Allowed unused vars must match /^_/u.","line":260,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":260,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"generateMasterDetail"},"fix":{"range":[8224,8785],"text":""},"desc":"Remove unused variable 'generateMasterDetail'."}]},{"ruleId":"prefer-const","severity":1,"message":"'index' is never reassigned. Use 'const' instead.","line":262,"column":12,"nodeType":"Identifier","messageId":"useConst","endLine":262,"endColumn":17,"fix":{"range":[8312,8321],"text":"const index"}},{"ruleId":"prefer-const","severity":1,"message":"'column' is never reassigned. Use 'const' instead.","line":263,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":263,"endColumn":15,"fix":{"range":[8358,8401],"text":"const column = document.createElement(\"div\");"}},{"ruleId":"prefer-const","severity":1,"message":"'textNode' is never reassigned. Use 'const' instead.","line":271,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":271,"endColumn":17,"fix":{"range":[8583,8676],"text":"const textNode = document.createTextNode(\n      vulnerableAppEndPointData[index][\"Name\"]\n    );"}},{"ruleId":"prefer-const","severity":1,"message":"'index' is never reassigned. Use 'const' instead.","line":290,"column":14,"nodeType":"Identifier","messageId":"useConst","endLine":290,"endColumn":19,"fix":{"range":[9229,9238],"text":"const index"}},{"ruleId":"prefer-const","severity":1,"message":"'attackVector' is never reassigned. Use 'const' instead.","line":293,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":293,"endColumn":23,"fix":{"range":[9353,9497],"text":"const attackVector =\n        vulnerableAppEndPointData[currentId][\"Detailed Information\"][\n          currentKey\n        ][\"AttackVectors\"][index];"}},{"ruleId":"prefer-const","severity":1,"message":"'curlPayload' is never reassigned. Use 'const' instead.","line":297,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":297,"endColumn":22,"fix":{"range":[9504,9550],"text":"const curlPayload = attackVector[\"CurlPayload\"];"}},{"ruleId":"prefer-const","severity":1,"message":"'description' is never reassigned. Use 'const' instead.","line":298,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":298,"endColumn":22,"fix":{"range":[9557,9603],"text":"const description = attackVector[\"Description\"];"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":25,"source":"const detail = document.querySelector(\".detail\");\nconst detailTitle = document.querySelector(\".detail-title\");\nconst master = document.querySelector(\".master\");\nconst innerMaster = document.querySelector(\".inner-master\");\n\nconst variantTooltip = {\n  secure: \"Secure implementation\",\n  unsecure: \"Unsecure implementation\",\n};\n\nlet vulnerabilitySelected = \"\";\nlet vulnerabilityLevelSelected = \"\";\n\nlet currentId;\nlet currentKey;\n\nfunction _loadDynamicJSAndCSS(urlToFetchHtmlTemplate) {\n  let dynamicScriptsElement = document.getElementById(\"dynamicScripts\");\n  let cssElement = document.createElement(\"link\");\n  cssElement.href = urlToFetchHtmlTemplate + \".css\";\n  cssElement.type = \"text/css\";\n  cssElement.rel = \"stylesheet\";\n  dynamicScriptsElement.appendChild(cssElement);\n  if (urlToFetchHtmlTemplate === \"error\") {\n    document.getElementById(\"hideHelp\").style.display = \"none\";\n    document.getElementById(\"showHelp\").style.display = \"none\";\n  } else {\n    document.getElementById(\"hideHelp\").style.display = \"inline-block\";\n    document.getElementById(\"showHelp\").style.display = \"inline-block\";\n    let jsElement = document.createElement(\"script\");\n    jsElement.type = \"module\";\n    jsElement.src = urlToFetchHtmlTemplate + \".js?p=\" + new Date().getTime();\n    dynamicScriptsElement.appendChild(jsElement);\n  }\n}\n\nfunction _callbackForInnerMasterOnClickEvent(\n  vulnerableAppEndPointData,\n  id,\n  key,\n  vulnerabilitySelected\n) {\n  return function () {\n    if (currentId == id && currentKey == key) {\n      return;\n    }\n    currentId = id;\n    currentKey = key;\n    clearSelectedInnerMaster();\n    vulnerabilityLevelSelected =\n      vulnerableAppEndPointData[id][\"Detailed Information\"][key][\"Level\"];\n    this.classList.add(\"active-item\");\n    let htmlTemplate =\n      vulnerableAppEndPointData[id][\"Detailed Information\"][key][\n        \"HtmlTemplate\"\n      ];\n    document.getElementById(\"vulnerabilityDescription\").innerHTML =\n      vulnerableAppEndPointData[id][\"Description\"];\n    let urlToFetchHtmlTemplate = htmlTemplate\n      ? \"/VulnerableApp/templates/\" + vulnerabilitySelected + \"/\" + htmlTemplate\n      : \"error\";\n    let parentNodeWithAllDynamicScripts = document.getElementById(\n      \"dynamicScripts\"\n    );\n    let dynamicScriptNode = parentNodeWithAllDynamicScripts.lastElementChild;\n    //Might not require to iterate but iterating for safe side. can be removed after proper testing.\n    while (dynamicScriptNode) {\n      dynamicScriptNode.remove();\n      dynamicScriptNode = parentNodeWithAllDynamicScripts.lastElementChild;\n    }\n    doGetAjaxCall((responseText) => {\n      detailTitle.innerHTML = responseText;\n      _loadDynamicJSAndCSS(urlToFetchHtmlTemplate);\n    }, urlToFetchHtmlTemplate + \".html\");\n  };\n}\n\nfunction _isSecureVariant(detailedInformation) {\n  return detailedInformation[\"Variant\"] === \"SECURE\";\n}\n\nfunction _getSvgElementForVariant(isSecure) {\n  let svg = document.createElement(\"img\");\n  svg.classList.add(\"vector\");\n  svg.classList.add(\"tooltip\");\n  const svgVariantName = isSecure ? \"secure\" : \"unsecure\";\n\n  svg.setAttribute(\"src\", \"vectors/\" + svgVariantName + \".svg\");\n\n  return svg;\n}\n\nfunction createColumn(detailedInformationArray, key) {\n  let detailedInformation = detailedInformationArray[key];\n  let isSecure = _isSecureVariant(detailedInformation);\n\n  let column = document.createElement(\"div\");\n  column.id = \"0.\" + key;\n\n  let svgWithTooltip = document.createElement(\"div\");\n  svgWithTooltip.classList.add(\"tooltip\");\n\n  let span = document.createElement(\"span\");\n  span.classList.add(\"tooltip-text\");\n  span.classList.add(\n    isSecure ? \"secure-variant-tooltip-text\" : \"unsecure-variant-tooltip-text\"\n  );\n  span.innerHTML = isSecure ? variantTooltip.secure : variantTooltip.unsecure;\n\n  svgWithTooltip.appendChild(span);\n  svgWithTooltip.appendChild(_getSvgElementForVariant(isSecure));\n  column.appendChild(svgWithTooltip);\n\n  column.appendChild(document.createTextNode(detailedInformation[\"Level\"]));\n  column.classList.add(\"inner-master-item\");\n\n  if (isSecure) {\n    column.classList.add(\"secure-vulnerability\");\n  }\n\n  return column;\n}\n\nfunction appendNewColumn(vulnerableAppEndPointData, id) {\n  let detailedInformationArray =\n    vulnerableAppEndPointData[id][\"Detailed Information\"];\n  let isFirst = true;\n\n  for (let key in detailedInformationArray) {\n    if (!detailedInformationArray.hasOwnProperty(key)) {\n      continue;\n    }\n    let column = createColumn(detailedInformationArray, key);\n    column.addEventListener(\n      \"click\",\n      _callbackForInnerMasterOnClickEvent(\n        vulnerableAppEndPointData,\n        id,\n        key,\n        vulnerabilitySelected\n      )\n    );\n    if (isFirst) {\n      column.click();\n      isFirst = false;\n    }\n    innerMaster.appendChild(column);\n  }\n}\n\n/**\n * Replace vulnerability description and append a column with all of the vulnerability levels.\n * Each level is assigned with an event listener that aims to handle specific level selection.\n * @param {Object} vulnerableAppEndPointData - data from the API describing the vulnerability\n * @param {number} id - master-item identifier\n */\nfunction handleElementAutoSelection(vulnerableAppEndPointData, id = 0) {\n  if (!vulnerableAppEndPointData.length) {\n    return;\n  }\n\n  if (id === 0) {\n    detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];\n  } else {\n    innerMaster.innerHTML = \"\";\n  }\n\n  vulnerabilitySelected = vulnerableAppEndPointData[id][\"Name\"];\n  detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];\n  appendNewColumn(vulnerableAppEndPointData, id);\n}\n\nfunction update(vulnerableAppEndPointData) {\n  const masterItems = document.querySelectorAll(\".master-item\");\n  handleElementAutoSelection(vulnerableAppEndPointData, 0);\n  masterItems.forEach((item) => {\n    item.addEventListener(\"click\", function () {\n      clearSelectedMaster();\n      this.classList.add(\"active-item\");\n      detail.classList.remove(\"hidden-md-down\");\n      handleElementAutoSelection(vulnerableAppEndPointData, this.id);\n    });\n  });\n  _addingEventListenerToShowHideHelpButton(vulnerableAppEndPointData);\n}\n\nfunction _clearActiveItemClass(items) {\n  for (let item of items) {\n    //to clear out the already active item\n    item.classList.remove(\"active-item\");\n  }\n}\n\nfunction clearSelectedMaster() {\n  //console.log('Clicked item');\n  const masterItems = document.querySelectorAll(\".master-item\");\n  //Making back to learning vulnerability\n  document.getElementById(\"vulnLearnBtn\").click();\n  _clearActiveItemClass(masterItems);\n  _clearHelp();\n}\n\nfunction clearSelectedInnerMaster() {\n  //console.log('Clicked item');\n  const innerMasterItems = document.querySelectorAll(\".inner-master-item\");\n  _clearActiveItemClass(innerMasterItems);\n  _clearHelp();\n}\n\nfunction back() {\n  detail.classList.add(\"hidden-md-down\");\n  clearSelected();\n}\n\nfunction getUrlForVulnerabilityLevel() {\n  return (\n    \"/VulnerableApp/\" + vulnerabilitySelected + \"/\" + vulnerabilityLevelSelected\n  );\n}\n\nfunction genericResponseHandler(xmlHttpRequest, callBack, isJson) {\n  if (xmlHttpRequest.readyState == XMLHttpRequest.DONE) {\n    // XMLHttpRequest.DONE == 4\n    if (xmlHttpRequest.status == 200 || xmlHttpRequest.status == 401) {\n      if (isJson) {\n        callBack(JSON.parse(xmlHttpRequest.responseText));\n      } else {\n        callBack(xmlHttpRequest.responseText);\n      }\n    } else if (xmlHttpRequest.status == 400) {\n      alert(\"There was an error 400\");\n    } else {\n      alert(\"something else other than 200/401 was returned\");\n    }\n  }\n}\n\nfunction doGetAjaxCall(callBack, url, isJson) {\n  let xmlHttpRequest = new XMLHttpRequest();\n  xmlHttpRequest.onreadystatechange = function () {\n    genericResponseHandler(xmlHttpRequest, callBack, isJson);\n  };\n  xmlHttpRequest.open(\"GET\", url, true);\n  xmlHttpRequest.setRequestHeader(\n    \"Content-Type\",\n    isJson ? \"application/json\" : \"text/html\"\n  );\n  xmlHttpRequest.send();\n}\n\nfunction doPostAjaxCall(callBack, url, isJson, data) {\n  let xmlHttpRequest = new XMLHttpRequest();\n  xmlHttpRequest.onreadystatechange = function () {\n    return genericResponseHandler(xmlHttpRequest, callBack, isJson);\n  };\n  xmlHttpRequest.open(\"POST\", url, true);\n  xmlHttpRequest.send(data);\n}\n\nfunction generateMasterDetail(vulnerableAppEndPointData) {\n  let isFirst = true;\n  for (let index in vulnerableAppEndPointData) {\n    let column = document.createElement(\"div\");\n    if (isFirst) {\n      column.className = \"master-item  active-item\";\n      isFirst = false;\n    } else {\n      column.className = \"master-item\";\n    }\n    column.id = index;\n    let textNode = document.createTextNode(\n      vulnerableAppEndPointData[index][\"Name\"]\n    );\n    column.appendChild(textNode);\n    master.appendChild(column);\n  }\n  update(vulnerableAppEndPointData);\n}\n\nfunction _clearHelp() {\n  document.getElementById(\"showHelp\").disabled = false;\n  document.getElementById(\"helpText\").innerHTML = \"\";\n  document.getElementById(\"hideHelp\").disabled = true;\n}\n\nfunction _addingEventListenerToShowHideHelpButton(vulnerableAppEndPointData) {\n  document.getElementById(\"showHelp\").addEventListener(\"click\", function () {\n    document.getElementById(\"showHelp\").disabled = true;\n    let helpText = \"<ol>\";\n    for (let index in vulnerableAppEndPointData[currentId][\n      \"Detailed Information\"\n    ][currentKey][\"AttackVectors\"]) {\n      let attackVector =\n        vulnerableAppEndPointData[currentId][\"Detailed Information\"][\n          currentKey\n        ][\"AttackVectors\"][index];\n      let curlPayload = attackVector[\"CurlPayload\"];\n      let description = attackVector[\"Description\"];\n      helpText =\n        helpText +\n        \"<li><b>Description about the attack:</b> \" +\n        description +\n        \"<br/><b>Payload:</b> \" +\n        curlPayload +\n        \"</li>\";\n    }\n    helpText = helpText + \"</ol>\";\n    document.getElementById(\"helpText\").innerHTML = helpText;\n    document.getElementById(\"hideHelp\").disabled = false;\n  });\n\n  document.getElementById(\"hideHelp\").addEventListener(\"click\", function () {\n    _clearHelp();\n  });\n}\n\n/**\n * Autoregistered Event listeners\n */\n(function _autoRegister() {\n  document\n    .getElementById(\"learnAndPracticeBtn\")\n    .addEventListener(\"click\", () => {\n      document.getElementById(\"testScanner\").classList.add(\"hide-component\");\n      document\n        .getElementById(\"learnAndPractice\")\n        .classList.remove(\"hide-component\");\n      document.getElementById(\"chooseMode\").classList.add(\"hide-component\");\n    });\n\n  document.getElementById(\"testScannerBtn\").addEventListener(\"click\", () => {\n    document.getElementById(\"testScanner\").classList.remove(\"hide-component\");\n    document.getElementById(\"learnAndPractice\").classList.add(\"hide-component\");\n    document.getElementById(\"chooseMode\").classList.add(\"hide-component\");\n  });\n\n  document.getElementById(\"vulnPracticeBtn\").addEventListener(\"click\", () => {\n    document.getElementById(\"vulnPractice\").classList.remove(\"hide-component\");\n    document\n      .getElementById(\"vulnerabilityDescription\")\n      .classList.add(\"hide-component\");\n    document.getElementById(\"vulnLearnBtn\").classList.remove(\"hide-component\");\n    document.getElementById(\"vulnPracticeBtn\").classList.add(\"hide-component\");\n  });\n\n  document.getElementById(\"vulnLearnBtn\").addEventListener(\"click\", () => {\n    document.getElementById(\"vulnPractice\").classList.add(\"hide-component\");\n    document\n      .getElementById(\"vulnerabilityDescription\")\n      .classList.remove(\"hide-component\");\n    document\n      .getElementById(\"vulnPracticeBtn\")\n      .classList.remove(\"hide-component\");\n    document.getElementById(\"vulnLearnBtn\").classList.add(\"hide-component\");\n  });\n\n  //  document.getElementById(\"about\").addEventListener(\"click\", () => {\n  //    document.getElementById(\"aboutContainer\").scrollIntoView(true);\n  //  });\n})();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]}]