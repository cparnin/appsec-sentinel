{"version":"1.139.0","results":[{"check_id":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":3,"col":5,"offset":29},"end":{"line":3,"col":23,"offset":47},"extra":{"metavars":{"$SERVICE":{"start":{"line":3,"col":5,"offset":29},"end":{"line":3,"col":23,"offset":47},"abstract_content":"VulnerableApp-base"}},"message":"Service 'VulnerableApp-base' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges","shortlink":"https://sg.run/0n8q","semgrep.dev":{"rule":{"origin":"community","r_id":10054,"rule_id":"qNUoWr","rv_id":947034,"url":"https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges","version_id":"o5TZz4P"}}},"severity":"WARNING","fingerprint":"5e576b9df7c491d84a841911048765ed8d8bcf966cdeebb4210a63b5923fb93ba80682a9aaf81ac05c2ffaa61500c2818ce4e1110eb61935f12efeb9649572cc_0","lines":"    VulnerableApp-base:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":3,"col":5,"offset":29},"end":{"line":3,"col":23,"offset":47},"extra":{"metavars":{"$SERVICE":{"start":{"line":3,"col":5,"offset":29},"end":{"line":3,"col":23,"offset":47},"abstract_content":"VulnerableApp-base"}},"message":"Service 'VulnerableApp-base' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir","https://blog.atomist.com/security-of-docker-kubernetes/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","shortlink":"https://sg.run/e4JE","semgrep.dev":{"rule":{"origin":"community","r_id":10132,"rule_id":"v8U5vN","rv_id":947038,"url":"https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","version_id":"X0TLZd0"}}},"severity":"WARNING","fingerprint":"9702a1bd61766bbe096d969072c1608ef57b10a8234c1e51bc96cdd26a96ab40036ecf35b342b6bbe60a9e03ee11bd38534f0ee8091b98f7ab57eb3d67c227cc_0","lines":"    VulnerableApp-base:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":6,"col":5,"offset":114},"end":{"line":6,"col":22,"offset":131},"extra":{"metavars":{"$SERVICE":{"start":{"line":6,"col":5,"offset":114},"end":{"line":6,"col":22,"offset":131},"abstract_content":"VulnerableApp-jsp"}},"message":"Service 'VulnerableApp-jsp' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges","shortlink":"https://sg.run/0n8q","semgrep.dev":{"rule":{"origin":"community","r_id":10054,"rule_id":"qNUoWr","rv_id":947034,"url":"https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges","version_id":"o5TZz4P"}}},"severity":"WARNING","fingerprint":"d943fd9ec98d8f777be980d656fa403072777257de08fcafab9eb75709eadc2e3623f773de036990f9294369b5cfeee84ea8cb73a1d42c653321f66beab171a6_0","lines":"    VulnerableApp-jsp:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":6,"col":5,"offset":114},"end":{"line":6,"col":22,"offset":131},"extra":{"metavars":{"$SERVICE":{"start":{"line":6,"col":5,"offset":114},"end":{"line":6,"col":22,"offset":131},"abstract_content":"VulnerableApp-jsp"}},"message":"Service 'VulnerableApp-jsp' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir","https://blog.atomist.com/security-of-docker-kubernetes/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","shortlink":"https://sg.run/e4JE","semgrep.dev":{"rule":{"origin":"community","r_id":10132,"rule_id":"v8U5vN","rv_id":947038,"url":"https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","version_id":"X0TLZd0"}}},"severity":"WARNING","fingerprint":"2ea059cce3f1340a62c21e1a75a3ebd5b2a1ba9cbbf612d35b7421134eb992f448207c742bc1a94ff43a844e08244718fdc41fad0faf9dde80f1c2aa44ca50b4_0","lines":"    VulnerableApp-jsp:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":9,"col":5,"offset":193},"end":{"line":9,"col":22,"offset":210},"extra":{"metavars":{"$SERVICE":{"start":{"line":9,"col":5,"offset":193},"end":{"line":9,"col":22,"offset":210},"abstract_content":"VulnerableApp-php"}},"message":"Service 'VulnerableApp-php' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges","shortlink":"https://sg.run/0n8q","semgrep.dev":{"rule":{"origin":"community","r_id":10054,"rule_id":"qNUoWr","rv_id":947034,"url":"https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges","version_id":"o5TZz4P"}}},"severity":"WARNING","fingerprint":"60170015cfa8d576a0c54db04c8b08d5a7d12bd6261d6c4c1922e7b0d70e52c0a5293fecb2233320019c4185735b9d90fc35e8f99f7f7142ed1e26ec6d1efe5e_0","lines":"    VulnerableApp-php:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":9,"col":5,"offset":193},"end":{"line":9,"col":22,"offset":210},"extra":{"metavars":{"$SERVICE":{"start":{"line":9,"col":5,"offset":193},"end":{"line":9,"col":22,"offset":210},"abstract_content":"VulnerableApp-php"}},"message":"Service 'VulnerableApp-php' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir","https://blog.atomist.com/security-of-docker-kubernetes/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","shortlink":"https://sg.run/e4JE","semgrep.dev":{"rule":{"origin":"community","r_id":10132,"rule_id":"v8U5vN","rv_id":947038,"url":"https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","version_id":"X0TLZd0"}}},"severity":"WARNING","fingerprint":"bac212a8812aced5fe4f0491f1a7ba584f6f743b7cc60bd949d957913a84de65861f70256a33164da63d2a74141c1ce562660f23b64f290307e1065501811f12_0","lines":"    VulnerableApp-php:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.no-new-privileges.no-new-privileges","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":12,"col":5,"offset":275},"end":{"line":12,"col":25,"offset":295},"extra":{"metavars":{"$SERVICE":{"start":{"line":12,"col":5,"offset":275},"end":{"line":12,"col":25,"offset":295},"abstract_content":"VulnerableApp-facade"}},"message":"Service 'VulnerableApp-facade' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/","https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges","shortlink":"https://sg.run/0n8q","semgrep.dev":{"rule":{"origin":"community","r_id":10054,"rule_id":"qNUoWr","rv_id":947034,"url":"https://semgrep.dev/playground/r/o5TZz4P/yaml.docker-compose.security.no-new-privileges.no-new-privileges","version_id":"o5TZz4P"}}},"severity":"WARNING","fingerprint":"8a218840b29bea24d5109693d40384047f4a8128e1dd1b19b11793b3cb6069ecfbb027f470a4148306f9aa846fce7a477c7ba9e16a35eb78ab134409e1431496_0","lines":"    VulnerableApp-facade:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","path":"/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","start":{"line":12,"col":5,"offset":275},"end":{"line":12,"col":25,"offset":295},"extra":{"metavars":{"$SERVICE":{"start":{"line":12,"col":5,"offset":275},"end":{"line":12,"col":25,"offset":295},"abstract_content":"VulnerableApp-facade"}},"message":"Service 'VulnerableApp-facade' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.","metadata":{"cwe":["CWE-732: Incorrect Permission Assignment for Critical Resource"],"owasp":["A05:2021 - Security Misconfiguration","A06:2017 - Security Misconfiguration"],"references":["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir","https://blog.atomist.com/security-of-docker-kubernetes/","https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"],"category":"security","technology":["docker-compose"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","shortlink":"https://sg.run/e4JE","semgrep.dev":{"rule":{"origin":"community","r_id":10132,"rule_id":"v8U5vN","rv_id":947038,"url":"https://semgrep.dev/playground/r/X0TLZd0/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service","version_id":"X0TLZd0"}}},"severity":"WARNING","fingerprint":"58b9c4a7f4d454ec1457f299c98d8cdeac9b6ef6c5ffc66fc5a6e0e572ad287c637d447aa04887bf665214cce94b902d2dc657dcbed055d9bb3ee2516e7294f0_0","lines":"    VulnerableApp-facade:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":42,"col":6,"offset":1604},"end":{"line":42,"col":20,"offset":1618},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":43,"col":12,"offset":1646},"end":{"line":43,"col":18,"offset":1652},"abstract_content":"String"},"$METHOD":{"start":{"line":43,"col":19,"offset":1653},"end":{"line":43,"col":31,"offset":1665},"abstract_content":"allEndPoints"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"defa98ef82df5721f17b07ded6959ace5d3d35ce9d1443feef6f156a0ed0853ae6ad08ca04fc0cde0822472835611dd0a9e0f0f8ba131f36179ac241371ae5de_0","lines":"    @RequestMapping(\"/allEndPoint\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":57,"col":6,"offset":2095},"end":{"line":57,"col":20,"offset":2109},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":58,"col":12,"offset":2150},"end":{"line":58,"col":41,"offset":2179},"abstract_content":"List<VulnerabilityDefinition>"},"$METHOD":{"start":{"line":58,"col":42,"offset":2180},"end":{"line":58,"col":69,"offset":2207},"abstract_content":"getVulnerabilityDefinitions"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"540ba23d6c8fed98d39991e6e3b3e2374a7292e9874d854bc6b000c97d46872f6cce9ebd9a92e1bda9c2e6c687cdd8b27a28f4a3f023ed01b305a4c76d2ca140_0","lines":"    @RequestMapping(\"/VulnerabilityDefinitions\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":75,"col":6,"offset":2873},"end":{"line":75,"col":20,"offset":2887},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":76,"col":12,"offset":2919},"end":{"line":76,"col":42,"offset":2949},"abstract_content":"List<AllEndPointsResponseBean>"},"$METHOD":{"start":{"line":76,"col":43,"offset":2950},"end":{"line":76,"col":67,"offset":2974},"abstract_content":"allEndPointsJsonResponse"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"fa23e628610303f7f94420eaa3e799bd0340341cc036429f1a8baecc3b8d6734f183dded933f5c254108fef592d891ce33a0671e1dcf2946d2a35fdfecd4640d_0","lines":"    @RequestMapping(\"/allEndPointJson\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":90,"col":6,"offset":3385},"end":{"line":90,"col":20,"offset":3399},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":91,"col":12,"offset":3423},"end":{"line":91,"col":37,"offset":3448},"abstract_content":"List<ScannerResponseBean>"},"$METHOD":{"start":{"line":91,"col":38,"offset":3449},"end":{"line":91,"col":66,"offset":3477},"abstract_content":"getScannerRelatedInformation"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"e61567b845f3c91a3b6e50262237f9ce1c5e614f3127c27a1baf100b03e75c7da7eb428237a53dd82aa021738643ed2757090283498691c2ee11b9f591cca832_0","lines":"    @RequestMapping(\"/scanner\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":105,"col":6,"offset":3960},"end":{"line":105,"col":20,"offset":3974},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":106,"col":12,"offset":4007},"end":{"line":106,"col":35,"offset":4030},"abstract_content":"ScannerMetaResponseBean"},"$METHOD":{"start":{"line":106,"col":36,"offset":4031},"end":{"line":106,"col":68,"offset":4063},"abstract_content":"getScannerRelatedMetaInformation"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"c6137becbc7e7b1863617ad35a19ce97acfbee3e9ba580c5bd3fa570414f2942e9647f4d098e09fd1624cfb4c8d4a5d5c5961508f2e76d5b46bcb2e1ebb11637_0","lines":"    @RequestMapping(\"/scanner/metadata\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","start":{"line":121,"col":6,"offset":4633},"end":{"line":121,"col":20,"offset":4647},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":122,"col":12,"offset":4675},"end":{"line":122,"col":18,"offset":4681},"abstract_content":"String"},"$METHOD":{"start":{"line":122,"col":19,"offset":4682},"end":{"line":122,"col":44,"offset":4707},"abstract_content":"sitemapForPassiveScanners"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"488dddcf4e4a5a90d000268efd2227b2c22573b1ae25570258c1249e6b56fc588a071407965ccff4b73d7e0588af114950a40adec8abe87db1c4ed5275542250_0","lines":"    @RequestMapping(\"/sitemap.xml\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java","start":{"line":33,"col":6,"offset":1330},"end":{"line":33,"col":20,"offset":1344},"extra":{"metavars":{"$RETURNTYPE":{"start":{"line":35,"col":12,"offset":1453},"end":{"line":35,"col":34,"offset":1475},"abstract_content":"ResponseEntity<byte[]>"},"$METHOD":{"start":{"line":35,"col":35,"offset":1476},"end":{"line":35,"col":44,"offset":1485},"abstract_content":"fetchFile"}},"message":"Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"source-rule-url":"https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING","references":["https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","shortlink":"https://sg.run/2xlq","semgrep.dev":{"rule":{"origin":"community","r_id":9219,"rule_id":"wdUJ7q","rv_id":945748,"url":"https://semgrep.dev/playground/r/3ZTOPgQ/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping","version_id":"3ZTOPgQ"}}},"severity":"WARNING","fingerprint":"459c9108050578ea35d518f9b1e6a47cc4ef5b24b0cc3e2827de26663ef9d95257a7ced8e1013a63b718c9dbab737533838f40083cc876eefc1360f80b5c1403_0","lines":"    @RequestMapping(","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-url-host.tainted-url-host","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":39,"col":103,"offset":1729},"end":{"line":39,"col":129,"offset":1755},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":33,"col":35,"offset":1352},"end":{"line":33,"col":68,"offset":1385},"abstract_content":"getVulnerablePayloadLevelUnsecure"},"$REQ":{"start":{"line":34,"col":14,"offset":1400},"end":{"line":34,"col":26,"offset":1412},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":34,"col":27,"offset":1413},"end":{"line":34,"col":46,"offset":1432},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444},"abstract_content":"queryParams"},"$ONEARG":{"start":{"line":39,"col":111,"offset":1737},"end":{"line":39,"col":128,"offset":1754},"abstract_content":"queryParameterURL","propagated_value":{"svalue_start":{"line":36,"col":36,"offset":1536},"svalue_end":{"line":36,"col":66,"offset":1566},"svalue_abstract_content":"queryParams.get(URL_PARAM_KEY)"}}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/vkYn","semgrep.dev":{"rule":{"origin":"community","r_id":22077,"rule_id":"oqUZo8","rv_id":945747,"url":"https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host","version_id":"QkTZzLZ"}}},"severity":"ERROR","fingerprint":"a19c278894b35a7f075b82c77cbba7e4e9eb4e6b78a87c69f781dccd4b5e3d8b0f7070b02d74f36bfeac9f456d428d11c9de66cd026be1fc17af2e5bd2156410_0","lines":"if (!isAllowedHost(queryParameterURL)) { throw new SecurityException(\"Host not allowed\"); } URL url = new URL(queryParameterURL);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":36,"col":16,"offset":1516},"end":{"line":36,"col":33,"offset":1533}},"content":"queryParameterURL"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":39,"col":103,"offset":1729},"end":{"line":39,"col":129,"offset":1755}},"new URL(queryParameterURL)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":41,"col":58,"offset":1878},"end":{"line":41,"col":69,"offset":1889},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":33,"col":12,"offset":1329},"end":{"line":33,"col":34,"offset":1351},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":33,"col":35,"offset":1352},"end":{"line":33,"col":68,"offset":1385},"abstract_content":"getVulnerablePayloadLevelUnsecure"},"$REQ":{"start":{"line":34,"col":14,"offset":1400},"end":{"line":34,"col":26,"offset":1412},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":34,"col":27,"offset":1413},"end":{"line":34,"col":46,"offset":1432},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444},"abstract_content":"queryParams"},"$REST":{"start":{"line":41,"col":32,"offset":1852},"end":{"line":41,"col":44,"offset":1864},"abstract_content":"restTemplate","propagated_value":{"svalue_start":{"line":40,"col":45,"offset":1801},"svalue_end":{"line":40,"col":63,"offset":1819},"svalue_abstract_content":"new RestTemplate()"}},"$RESTFUNC":{"start":{"line":41,"col":45,"offset":1865},"end":{"line":41,"col":57,"offset":1877},"abstract_content":"getForObject"},"$URI":{"start":{"line":41,"col":58,"offset":1878},"end":{"line":41,"col":69,"offset":1889},"abstract_content":"url.toURI()"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Spring","functional-categories":["net::sink::http-request::ApacheHttpClient","net::sink::http-request::Guava","net::sink::http-request::HttpClient","net::sink::http-request::Jsoup","net::sink::http-request::OkHttp","net::sink::http-request::RestTemplate","net::sink::http-request::URL","net::sink::http-request::WebClient","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"supersedes":["java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","shortlink":"https://sg.run/dnYZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":43778,"rule_id":"JDU4Yg","rv_id":1152309,"url":"https://semgrep.dev/playground/r/JdTvO6j/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","version_id":"JdTvO6j"}}},"severity":"ERROR","fingerprint":"8ef3e729f675f86b040bc5d748ec0e7866d496b5bd12d625aeead140b5cf4195995533b5f2f9ea742143b074be3fb18ac544ed2b335c9110d6e8ec57b5c2a004_0","lines":"                payload.append(restTemplate.getForObject(url.toURI(), String.class));","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":34,"col":47,"offset":1433},"end":{"line":34,"col":58,"offset":1444}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":36,"col":16,"offset":1516},"end":{"line":36,"col":33,"offset":1533}},"content":"queryParameterURL"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":39,"col":97,"offset":1723},"end":{"line":39,"col":100,"offset":1726}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":41,"col":58,"offset":1878},"end":{"line":41,"col":69,"offset":1889}},"url.toURI()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-url-host.tainted-url-host","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":59,"col":27,"offset":2678},"end":{"line":59,"col":53,"offset":2704},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":53,"col":35,"offset":2320},"end":{"line":53,"col":74,"offset":2359},"abstract_content":"getVulnerablePayloadLevelUnsecureLevel2"},"$REQ":{"start":{"line":54,"col":14,"offset":2374},"end":{"line":54,"col":26,"offset":2386},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":54,"col":27,"offset":2387},"end":{"line":54,"col":46,"offset":2406},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418},"abstract_content":"queryParams"},"$ONEARG":{"start":{"line":59,"col":35,"offset":2686},"end":{"line":59,"col":52,"offset":2703},"abstract_content":"queryParameterURL","propagated_value":{"svalue_start":{"line":56,"col":36,"offset":2510},"svalue_end":{"line":56,"col":66,"offset":2540},"svalue_abstract_content":"queryParams.get(URL_PARAM_KEY)"}}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/vkYn","semgrep.dev":{"rule":{"origin":"community","r_id":22077,"rule_id":"oqUZo8","rv_id":945747,"url":"https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host","version_id":"QkTZzLZ"}}},"severity":"ERROR","fingerprint":"14d16480a2c22895cb919319a175e4b228e9317cf35697c2b33ede0b32e71c94441d57f1ce2421350dfea206b036d3f4a630a45ba12616998c122469f74bccd8_0","lines":"                URL url = new URL(queryParameterURL);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":56,"col":16,"offset":2490},"end":{"line":56,"col":33,"offset":2507}},"content":"queryParameterURL"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":59,"col":27,"offset":2678},"end":{"line":59,"col":53,"offset":2704}},"new URL(queryParameterURL)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":61,"col":58,"offset":2827},"end":{"line":61,"col":69,"offset":2838},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":53,"col":12,"offset":2297},"end":{"line":53,"col":34,"offset":2319},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":53,"col":35,"offset":2320},"end":{"line":53,"col":74,"offset":2359},"abstract_content":"getVulnerablePayloadLevelUnsecureLevel2"},"$REQ":{"start":{"line":54,"col":14,"offset":2374},"end":{"line":54,"col":26,"offset":2386},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":54,"col":27,"offset":2387},"end":{"line":54,"col":46,"offset":2406},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418},"abstract_content":"queryParams"},"$REST":{"start":{"line":61,"col":32,"offset":2801},"end":{"line":61,"col":44,"offset":2813},"abstract_content":"restTemplate","propagated_value":{"svalue_start":{"line":60,"col":45,"offset":2750},"svalue_end":{"line":60,"col":63,"offset":2768},"svalue_abstract_content":"new RestTemplate()"}},"$RESTFUNC":{"start":{"line":61,"col":45,"offset":2814},"end":{"line":61,"col":57,"offset":2826},"abstract_content":"getForObject"},"$URI":{"start":{"line":61,"col":58,"offset":2827},"end":{"line":61,"col":69,"offset":2838},"abstract_content":"url.toURI()"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Spring","functional-categories":["net::sink::http-request::ApacheHttpClient","net::sink::http-request::Guava","net::sink::http-request::HttpClient","net::sink::http-request::Jsoup","net::sink::http-request::OkHttp","net::sink::http-request::RestTemplate","net::sink::http-request::URL","net::sink::http-request::WebClient","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"supersedes":["java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","shortlink":"https://sg.run/dnYZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":43778,"rule_id":"JDU4Yg","rv_id":1152309,"url":"https://semgrep.dev/playground/r/JdTvO6j/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add","version_id":"JdTvO6j"}}},"severity":"ERROR","fingerprint":"bd68289a6c4d29184d72548235e5e5d77ccc7e63906832380b4a7a6a2fb9cf0f525410bdbf945265723b08db79bbe9374aec93255b6a20d4c6ba8f958ba12d92_0","lines":"                payload.append(restTemplate.getForObject(url.toURI(), String.class));","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":54,"col":47,"offset":2407},"end":{"line":54,"col":58,"offset":2418}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":56,"col":16,"offset":2490},"end":{"line":56,"col":33,"offset":2507}},"content":"queryParameterURL"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":59,"col":21,"offset":2672},"end":{"line":59,"col":24,"offset":2675}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","start":{"line":61,"col":58,"offset":2827},"end":{"line":61,"col":69,"offset":2838}},"url.toURI()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":51,"col":35,"offset":2417},"end":{"line":51,"col":58,"offset":2440},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":52,"col":14,"offset":2455},"end":{"line":52,"col":26,"offset":2467},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":52,"col":27,"offset":2468},"end":{"line":52,"col":46,"offset":2487},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":56,"col":18,"offset":2689},"end":{"line":56,"col":46,"offset":2717},"abstract_content":"select * from cars where id="}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"92d44db7a4cc2a66f2ac819837936ec5bc56707bb6a7741229bf3bfe2610521d47177ce792c5fb7d952989fd76beb2e4f7a5814107c79e525fc260f26866d4f2_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":53,"col":16,"offset":2518},"end":{"line":53,"col":18,"offset":2520}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":51,"col":12,"offset":2394},"end":{"line":51,"col":34,"offset":2416},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":51,"col":35,"offset":2417},"end":{"line":51,"col":58,"offset":2440},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":52,"col":14,"offset":2455},"end":{"line":52,"col":26,"offset":2467},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":52,"col":27,"offset":2468},"end":{"line":52,"col":46,"offset":2487},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499},"abstract_content":"queryParams"},"$JT":{"start":{"line":55,"col":16,"offset":2641},"end":{"line":55,"col":39,"offset":2664},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"a1f1cec679f6e9d2ca7cbac6256b32bdcbdb20c6af119f7338a3e86b2b7ef05beb7e22c1e1f09dd447ae8434ad848f215ec6d4709cc2a3568dab1fd9b1f55492_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":53,"col":16,"offset":2518},"end":{"line":53,"col":18,"offset":2520}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":51,"col":12,"offset":2394},"end":{"line":51,"col":34,"offset":2416},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":51,"col":35,"offset":2417},"end":{"line":51,"col":58,"offset":2440},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":52,"col":14,"offset":2455},"end":{"line":52,"col":26,"offset":2467},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":52,"col":27,"offset":2468},"end":{"line":52,"col":46,"offset":2487},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499},"abstract_content":"queryParams"},"$T":{"start":{"line":55,"col":16,"offset":2641},"end":{"line":55,"col":39,"offset":2664},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":55,"col":40,"offset":2665},"end":{"line":55,"col":45,"offset":2670},"abstract_content":"query"},"$A":{"start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"a0fbb5b9dbadab1727e0e27809e90e5d0ef50429ded4d0c553913f261223cb4729ab79c10c633e73cc424d3c046b7d6025e9b57af19aa161e31d79777ae89c87_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":52,"col":47,"offset":2488},"end":{"line":52,"col":58,"offset":2499}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":53,"col":16,"offset":2518},"end":{"line":53,"col":18,"offset":2520}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":56,"col":17,"offset":2688},"end":{"line":56,"col":52,"offset":2723}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":74,"col":35,"offset":3497},"end":{"line":74,"col":58,"offset":3520},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":75,"col":14,"offset":3535},"end":{"line":75,"col":26,"offset":3547},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":75,"col":27,"offset":3548},"end":{"line":75,"col":46,"offset":3567},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":80,"col":18,"offset":3860},"end":{"line":80,"col":47,"offset":3889},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"ea0585a67bc33e98d4e625cb56b6025c39c0bcc774ee0fddfec0997485ae9a488d82cc66f374bf0c89f48a3506b044427a489f7260607b47e959162ad128ae1b_0","lines":"                \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":76,"col":16,"offset":3598},"end":{"line":76,"col":18,"offset":3600}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":74,"col":12,"offset":3474},"end":{"line":74,"col":34,"offset":3496},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":74,"col":35,"offset":3497},"end":{"line":74,"col":58,"offset":3520},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":75,"col":14,"offset":3535},"end":{"line":75,"col":26,"offset":3547},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":75,"col":27,"offset":3548},"end":{"line":75,"col":46,"offset":3567},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579},"abstract_content":"queryParams"},"$JT":{"start":{"line":79,"col":16,"offset":3812},"end":{"line":79,"col":39,"offset":3835},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"e51a7f8adf472513122a46a80c52235e12ef7789b97f8fdbee687ab3c242cb7c8992ec90f108e2b9d286a0aac6eb7f59c086c8f5bc8bd86456ddd5d1a70ded61_0","lines":"                \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":76,"col":16,"offset":3598},"end":{"line":76,"col":18,"offset":3600}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":74,"col":12,"offset":3474},"end":{"line":74,"col":34,"offset":3496},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":74,"col":35,"offset":3497},"end":{"line":74,"col":58,"offset":3520},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":75,"col":14,"offset":3535},"end":{"line":75,"col":26,"offset":3547},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":75,"col":27,"offset":3548},"end":{"line":75,"col":46,"offset":3567},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579},"abstract_content":"queryParams"},"$T":{"start":{"line":79,"col":16,"offset":3812},"end":{"line":79,"col":39,"offset":3835},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":79,"col":40,"offset":3836},"end":{"line":79,"col":45,"offset":3841},"abstract_content":"query"},"$A":{"start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"ee82352bbdba261387a49afadd316a7ab3c70ed71158ced6406825dd24492d08a0fd6f7a0898d06ed7f89457729ace4d40f12d65ceb12f8c71abe619e1f718b3_0","lines":"                \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":75,"col":47,"offset":3568},"end":{"line":75,"col":58,"offset":3579}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":76,"col":16,"offset":3598},"end":{"line":76,"col":18,"offset":3600}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":80,"col":17,"offset":3859},"end":{"line":80,"col":59,"offset":3901}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":117,"col":35,"offset":5598},"end":{"line":117,"col":58,"offset":5621},"abstract_content":"getCarInformationLevel4"},"$REQ":{"start":{"line":118,"col":14,"offset":5636},"end":{"line":118,"col":26,"offset":5648},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":118,"col":27,"offset":5649},"end":{"line":118,"col":46,"offset":5668},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":129,"col":18,"offset":6132},"end":{"line":129,"col":46,"offset":6160},"abstract_content":"select * from cars where id="}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"e57024c7e4d9965b02d13793cd03dfde4899efe5493b153a7fd969aad33dd665f2c9e4dff01a47d86614562c510d2748782599b264b29cced44c620fc59c70a6_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":119,"col":16,"offset":5699},"end":{"line":119,"col":18,"offset":5701}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":117,"col":12,"offset":5575},"end":{"line":117,"col":34,"offset":5597},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":117,"col":35,"offset":5598},"end":{"line":117,"col":58,"offset":5621},"abstract_content":"getCarInformationLevel4"},"$REQ":{"start":{"line":118,"col":14,"offset":5636},"end":{"line":118,"col":26,"offset":5648},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":118,"col":27,"offset":5649},"end":{"line":118,"col":46,"offset":5668},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680},"abstract_content":"queryParams"},"$JT":{"start":{"line":128,"col":16,"offset":6084},"end":{"line":128,"col":39,"offset":6107},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"b157a08cf754fdb00697d80a48b93cdbb2397607e10ff9e3c2d8afa7b99e9310c6a4cb08b9529db83c577aa28cad9a733e9e54ba94ef8d858169dfcca9e669d3_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":119,"col":16,"offset":5699},"end":{"line":119,"col":18,"offset":5701}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":117,"col":12,"offset":5575},"end":{"line":117,"col":34,"offset":5597},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":117,"col":35,"offset":5598},"end":{"line":117,"col":58,"offset":5621},"abstract_content":"getCarInformationLevel4"},"$REQ":{"start":{"line":118,"col":14,"offset":5636},"end":{"line":118,"col":26,"offset":5648},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":118,"col":27,"offset":5649},"end":{"line":118,"col":46,"offset":5668},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680},"abstract_content":"queryParams"},"$T":{"start":{"line":128,"col":16,"offset":6084},"end":{"line":128,"col":39,"offset":6107},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":41,"col":40,"offset":1975},"svalue_end":{"line":41,"col":63,"offset":1998},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":128,"col":40,"offset":6108},"end":{"line":128,"col":45,"offset":6113},"abstract_content":"query"},"$A":{"start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"13437f7db00519d9c287c0b7e97f17dd07672d67841cf2ea6fc5d704d165a0d22f6f6d8a51c12cb088a413ddbc1ab0ea5a23ed0c1cff595bc578996d1739febd_0","lines":"                \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":118,"col":47,"offset":5669},"end":{"line":118,"col":58,"offset":5680}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":119,"col":16,"offset":5699},"end":{"line":119,"col":18,"offset":5701}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","start":{"line":129,"col":17,"offset":6131},"end":{"line":129,"col":52,"offset":6166}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":58,"col":35,"offset":2767},"end":{"line":58,"col":65,"offset":2797},"abstract_content":"doesCarInformationExistsLevel1"},"$REQ":{"start":{"line":59,"col":14,"offset":2812},"end":{"line":59,"col":26,"offset":2824},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":59,"col":27,"offset":2825},"end":{"line":59,"col":46,"offset":2844},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":65,"col":30,"offset":3123},"end":{"line":65,"col":58,"offset":3151},"abstract_content":"select * from cars where id="}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"a4dca924a6e40ce13a41b77df1db2ea3342c95d9bb70b1e10049461da1ab3b8b7b8dba690705e0066600f03ba417bff436625f66e7fa714fd641e6d5b484dbd1_0","lines":"                            \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":60,"col":16,"offset":2875},"end":{"line":60,"col":18,"offset":2877}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":58,"col":12,"offset":2744},"end":{"line":58,"col":34,"offset":2766},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":58,"col":35,"offset":2767},"end":{"line":58,"col":65,"offset":2797},"abstract_content":"doesCarInformationExistsLevel1"},"$REQ":{"start":{"line":59,"col":14,"offset":2812},"end":{"line":59,"col":26,"offset":2824},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":59,"col":27,"offset":2825},"end":{"line":59,"col":46,"offset":2844},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856},"abstract_content":"queryParams"},"$JT":{"start":{"line":64,"col":21,"offset":3063},"end":{"line":64,"col":44,"offset":3086},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"84276ad8a2b4bb864e0e711051f9239223e3832609df16a4cf8971d38f8821d85d8f365adfb7592d686c79c5614015299860ad31290da1dcd3c99b71b9b7e9bc_0","lines":"                            \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":60,"col":16,"offset":2875},"end":{"line":60,"col":18,"offset":2877}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":58,"col":12,"offset":2744},"end":{"line":58,"col":34,"offset":2766},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":58,"col":35,"offset":2767},"end":{"line":58,"col":65,"offset":2797},"abstract_content":"doesCarInformationExistsLevel1"},"$REQ":{"start":{"line":59,"col":14,"offset":2812},"end":{"line":59,"col":26,"offset":2824},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":59,"col":27,"offset":2825},"end":{"line":59,"col":46,"offset":2844},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856},"abstract_content":"queryParams"},"$T":{"start":{"line":64,"col":21,"offset":3063},"end":{"line":64,"col":44,"offset":3086},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":64,"col":45,"offset":3087},"end":{"line":64,"col":50,"offset":3092},"abstract_content":"query"},"$A":{"start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"194a208ab181c70553f4e29da17df72a3ff441622d8ab8d480e7e3a80997be10c2a10977f011c4141fcaf291f9ff0be2341d70741f5b7c9bb8ba9c965c2d937b_0","lines":"                            \"select * from cars where id=\" + id,","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":59,"col":47,"offset":2845},"end":{"line":59,"col":58,"offset":2856}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":60,"col":16,"offset":2875},"end":{"line":60,"col":18,"offset":2877}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":65,"col":29,"offset":3122},"end":{"line":65,"col":64,"offset":3157}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":103,"col":35,"offset":5294},"end":{"line":103,"col":65,"offset":5324},"abstract_content":"doesCarInformationExistsLevel2"},"$REQ":{"start":{"line":104,"col":14,"offset":5339},"end":{"line":104,"col":26,"offset":5351},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":104,"col":27,"offset":5352},"end":{"line":104,"col":46,"offset":5371},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":110,"col":30,"offset":5650},"end":{"line":110,"col":59,"offset":5679},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"7938a74754188459304dd12f78a122c73927270077b64e46be4765ccfa9ee2293ca470269b72ac71f0b8b21bab2f9bd1318112c89be3590b8333ea2f8e29fd88_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":105,"col":16,"offset":5402},"end":{"line":105,"col":18,"offset":5404}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":103,"col":12,"offset":5271},"end":{"line":103,"col":34,"offset":5293},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":103,"col":35,"offset":5294},"end":{"line":103,"col":65,"offset":5324},"abstract_content":"doesCarInformationExistsLevel2"},"$REQ":{"start":{"line":104,"col":14,"offset":5339},"end":{"line":104,"col":26,"offset":5351},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":104,"col":27,"offset":5352},"end":{"line":104,"col":46,"offset":5371},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383},"abstract_content":"queryParams"},"$JT":{"start":{"line":109,"col":21,"offset":5590},"end":{"line":109,"col":44,"offset":5613},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"746fb1c49c7306bcd33854714b2dc8a5e0c1aac58365c992bec887bb3e153853269a878d16271e6e09509e50d4554f59172fcae134016ccac1752b76eb4d9d23_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":105,"col":16,"offset":5402},"end":{"line":105,"col":18,"offset":5404}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":103,"col":12,"offset":5271},"end":{"line":103,"col":34,"offset":5293},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":103,"col":35,"offset":5294},"end":{"line":103,"col":65,"offset":5324},"abstract_content":"doesCarInformationExistsLevel2"},"$REQ":{"start":{"line":104,"col":14,"offset":5339},"end":{"line":104,"col":26,"offset":5351},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":104,"col":27,"offset":5352},"end":{"line":104,"col":46,"offset":5371},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383},"abstract_content":"queryParams"},"$T":{"start":{"line":109,"col":21,"offset":5590},"end":{"line":109,"col":44,"offset":5613},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":109,"col":45,"offset":5614},"end":{"line":109,"col":50,"offset":5619},"abstract_content":"query"},"$A":{"start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"83f2446393a5cdf31d95775a23c1bde0da08f2560a121af60c113b431010292ae0cd0ba36107adc333e184c4abbcbe60397afacb692677ee90e7c6c9c1f225a4_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":104,"col":47,"offset":5372},"end":{"line":104,"col":58,"offset":5383}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":105,"col":16,"offset":5402},"end":{"line":105,"col":18,"offset":5404}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":110,"col":29,"offset":5649},"end":{"line":110,"col":71,"offset":5691}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":149,"col":35,"offset":7982},"end":{"line":149,"col":65,"offset":8012},"abstract_content":"doesCarInformationExistsLevel3"},"$REQ":{"start":{"line":150,"col":14,"offset":8027},"end":{"line":150,"col":26,"offset":8039},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":150,"col":27,"offset":8040},"end":{"line":150,"col":46,"offset":8059},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":158,"col":30,"offset":8466},"end":{"line":158,"col":59,"offset":8495},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"8671bf4b09c0b4610eaad31ac96f03f318f1629d6408c7e1d5b3dc02d39f60891214113d6b1cdbd808383e675169de006696c9dce0ef2eee4ed535342b3908d2_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":151,"col":16,"offset":8090},"end":{"line":151,"col":18,"offset":8092}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":149,"col":12,"offset":7959},"end":{"line":149,"col":34,"offset":7981},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":149,"col":35,"offset":7982},"end":{"line":149,"col":65,"offset":8012},"abstract_content":"doesCarInformationExistsLevel3"},"$REQ":{"start":{"line":150,"col":14,"offset":8027},"end":{"line":150,"col":26,"offset":8039},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":150,"col":27,"offset":8040},"end":{"line":150,"col":46,"offset":8059},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071},"abstract_content":"queryParams"},"$JT":{"start":{"line":157,"col":21,"offset":8406},"end":{"line":157,"col":44,"offset":8429},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"339a613c36633018c9036fea9f066e7eba1142fa7fb5ac454c9c2532eaa8dbe84cb63b75f812d437c07c7aef73f7f9da33809a4617fc179b4e5a993834763c4d_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":151,"col":16,"offset":8090},"end":{"line":151,"col":18,"offset":8092}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":149,"col":12,"offset":7959},"end":{"line":149,"col":34,"offset":7981},"abstract_content":"ResponseEntity<String>"},"$METHOD":{"start":{"line":149,"col":35,"offset":7982},"end":{"line":149,"col":65,"offset":8012},"abstract_content":"doesCarInformationExistsLevel3"},"$REQ":{"start":{"line":150,"col":14,"offset":8027},"end":{"line":150,"col":26,"offset":8039},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":150,"col":27,"offset":8040},"end":{"line":150,"col":46,"offset":8059},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071},"abstract_content":"queryParams"},"$T":{"start":{"line":157,"col":21,"offset":8406},"end":{"line":157,"col":44,"offset":8429},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":48,"col":40,"offset":2313},"svalue_end":{"line":48,"col":63,"offset":2336},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":157,"col":45,"offset":8430},"end":{"line":157,"col":50,"offset":8435},"abstract_content":"query"},"$A":{"start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"a4dc4af7150b80c87b51019ff2ad89a97bd2bd09c3b743d31b73fd38b845da4b1d1a1282119c2fdf0fc6c4aaa52c006d8c92a11f870968721802586ab6af8611_0","lines":"                            \"select * from cars where id='\" + id + \"'\",","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":150,"col":47,"offset":8060},"end":{"line":150,"col":58,"offset":8071}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":151,"col":16,"offset":8090},"end":{"line":151,"col":18,"offset":8092}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":158,"col":29,"offset":8465},"end":{"line":158,"col":71,"offset":8507}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":209,"col":45,"offset":11337},"end":{"line":209,"col":87,"offset":11379},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":199,"col":35,"offset":10752},"end":{"line":199,"col":65,"offset":10782},"abstract_content":"doesCarInformationExistsLevel4"},"$REQ":{"start":{"line":200,"col":14,"offset":10797},"end":{"line":200,"col":26,"offset":10809},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":200,"col":27,"offset":10810},"end":{"line":200,"col":46,"offset":10829},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":200,"col":47,"offset":10830},"end":{"line":200,"col":58,"offset":10841},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":209,"col":46,"offset":11338},"end":{"line":209,"col":75,"offset":11367},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"bb83f036f2d3c2a070364726697b2dcb70e370069a1d5bb184f5874c5e25a2072e2e7c28aa43463eb313ea0a43839040450b027c1151c5ec4d97f56d5d952365_0","lines":"                                            \"select * from cars where id='\" + id + \"'\"),","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":200,"col":47,"offset":10830},"end":{"line":200,"col":58,"offset":10841}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":200,"col":47,"offset":10830},"end":{"line":200,"col":58,"offset":10841}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":201,"col":22,"offset":10866},"end":{"line":201,"col":24,"offset":10868}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","start":{"line":209,"col":45,"offset":11337},"end":{"line":209,"col":87,"offset":11379}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":63,"col":43,"offset":3046},"end":{"line":63,"col":66,"offset":3069},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":64,"col":14,"offset":3084},"end":{"line":64,"col":26,"offset":3096},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":64,"col":33,"offset":3103},"end":{"line":64,"col":52,"offset":3122},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":67,"col":18,"offset":3250},"end":{"line":67,"col":46,"offset":3278},"abstract_content":"select * from cars where id="}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"6167b8ba01c39e581c0c9bbc710f11e6b46cdba240f52022123fc8af96cad18409c1323bdbf2674e30fa900a0cf18639b12d02bd3861b52d56f0644551ff7a14_0","lines":"                \"select * from cars where id=\" + id, this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":65,"col":22,"offset":3159},"end":{"line":65,"col":24,"offset":3161}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":63,"col":12,"offset":3015},"end":{"line":63,"col":42,"offset":3045},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":63,"col":43,"offset":3046},"end":{"line":63,"col":66,"offset":3069},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":64,"col":14,"offset":3084},"end":{"line":64,"col":26,"offset":3096},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":64,"col":33,"offset":3103},"end":{"line":64,"col":52,"offset":3122},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134},"abstract_content":"queryParams"},"$JT":{"start":{"line":66,"col":16,"offset":3202},"end":{"line":66,"col":39,"offset":3225},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"0d798db826ddd156118ccea3b3ef88eaa0fb041169a69bd3590170f261b5f53f0ba3df7fac440c5f2d87664e101f871921e2cc160e78d6a6380ba1e79ee1e981_0","lines":"                \"select * from cars where id=\" + id, this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":65,"col":22,"offset":3159},"end":{"line":65,"col":24,"offset":3161}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":63,"col":12,"offset":3015},"end":{"line":63,"col":42,"offset":3045},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":63,"col":43,"offset":3046},"end":{"line":63,"col":66,"offset":3069},"abstract_content":"getCarInformationLevel1"},"$REQ":{"start":{"line":64,"col":14,"offset":3084},"end":{"line":64,"col":26,"offset":3096},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":64,"col":33,"offset":3103},"end":{"line":64,"col":52,"offset":3122},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134},"abstract_content":"queryParams"},"$T":{"start":{"line":66,"col":16,"offset":3202},"end":{"line":66,"col":39,"offset":3225},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":66,"col":40,"offset":3226},"end":{"line":66,"col":45,"offset":3231},"abstract_content":"query"},"$A":{"start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284},"abstract_content":"\"select * from cars where id=\"+id"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"9582e87fddbca299f0746c2e3b9c6113dbe079996417205e1ce7f6748eb5bdaabf87367ce69fd0d419dd6c5b7db80a0cd5ed3a4d199b842e7d82ab01f3e1be73_0","lines":"                \"select * from cars where id=\" + id, this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":64,"col":53,"offset":3123},"end":{"line":64,"col":64,"offset":3134}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":65,"col":22,"offset":3159},"end":{"line":65,"col":24,"offset":3161}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":67,"col":17,"offset":3249},"end":{"line":67,"col":52,"offset":3284}},"\"select * from cars where id=\" + id"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":78,"col":43,"offset":3788},"end":{"line":78,"col":66,"offset":3811},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":79,"col":14,"offset":3826},"end":{"line":79,"col":26,"offset":3838},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":79,"col":33,"offset":3845},"end":{"line":79,"col":52,"offset":3864},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":82,"col":18,"offset":3992},"end":{"line":82,"col":47,"offset":4021},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"72d0282f9d60ebd05ec8db1fd6b6f0949f51a73602d530160d8baa3b91aa27dad9a9dbc495e833ee60f4817490d372c4f37a5402b45d2922314d99f4cc58f756_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":80,"col":22,"offset":3901},"end":{"line":80,"col":24,"offset":3903}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":78,"col":12,"offset":3757},"end":{"line":78,"col":42,"offset":3787},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":78,"col":43,"offset":3788},"end":{"line":78,"col":66,"offset":3811},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":79,"col":14,"offset":3826},"end":{"line":79,"col":26,"offset":3838},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":79,"col":33,"offset":3845},"end":{"line":79,"col":52,"offset":3864},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876},"abstract_content":"queryParams"},"$JT":{"start":{"line":81,"col":16,"offset":3944},"end":{"line":81,"col":39,"offset":3967},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"b7e3dcd95c705f14be87859577514b70c99631a84d2a1f3e43f77a7798fdd52b10d0dbe0bc1da5fc13f49961e4398ab0dce6083b3af11501eb337c95a14241de_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":80,"col":22,"offset":3901},"end":{"line":80,"col":24,"offset":3903}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":78,"col":12,"offset":3757},"end":{"line":78,"col":42,"offset":3787},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":78,"col":43,"offset":3788},"end":{"line":78,"col":66,"offset":3811},"abstract_content":"getCarInformationLevel2"},"$REQ":{"start":{"line":79,"col":14,"offset":3826},"end":{"line":79,"col":26,"offset":3838},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":79,"col":33,"offset":3845},"end":{"line":79,"col":52,"offset":3864},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876},"abstract_content":"queryParams"},"$T":{"start":{"line":81,"col":16,"offset":3944},"end":{"line":81,"col":39,"offset":3967},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":81,"col":40,"offset":3968},"end":{"line":81,"col":45,"offset":3973},"abstract_content":"query"},"$A":{"start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"e5851a3dbb92f02928f0a95de3144b4dcf3678c69fa7f66d739db8e98eaff2b3000d80596387390d8480f8671397e00e7a557be52fe07750b33e356e700ffb92_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":79,"col":53,"offset":3865},"end":{"line":79,"col":64,"offset":3876}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":80,"col":22,"offset":3901},"end":{"line":80,"col":24,"offset":3903}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":82,"col":17,"offset":3991},"end":{"line":82,"col":59,"offset":4033}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-sql-string.tainted-sql-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"select"},"$METHODNAME":{"start":{"line":93,"col":43,"offset":4521},"end":{"line":93,"col":66,"offset":4544},"abstract_content":"getCarInformationLevel3"},"$REQ":{"start":{"line":94,"col":14,"offset":4559},"end":{"line":94,"col":26,"offset":4571},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":94,"col":33,"offset":4578},"end":{"line":94,"col":52,"offset":4597},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609},"abstract_content":"queryParams"},"$SQLSTR":{"start":{"line":97,"col":18,"offset":4745},"end":{"line":97,"col":47,"offset":4774},"abstract_content":"select * from cars where id='"}},"message":"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html"],"category":"security","technology":["spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/9rzz","semgrep.dev":{"rule":{"origin":"community","r_id":14767,"rule_id":"10UdRR","rv_id":945745,"url":"https://semgrep.dev/playground/r/8KTKj0G/java.spring.security.injection.tainted-sql-string.tainted-sql-string","version_id":"8KTKj0G"}}},"severity":"ERROR","fingerprint":"5c8b32ec5f0b3d2263ad5fc0a8564f24791ef3f33e290d6ad188c4736998e88c4c4bd49733195febd4d9f34cdddc1314b44a690d48d22174ab288be28fd8055b_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":95,"col":22,"offset":4634},"end":{"line":95,"col":24,"offset":4636}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"query"},"$RET":{"start":{"line":93,"col":12,"offset":4490},"end":{"line":93,"col":42,"offset":4520},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":93,"col":43,"offset":4521},"end":{"line":93,"col":66,"offset":4544},"abstract_content":"getCarInformationLevel3"},"$REQ":{"start":{"line":94,"col":14,"offset":4559},"end":{"line":94,"col":26,"offset":4571},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":94,"col":33,"offset":4578},"end":{"line":94,"col":52,"offset":4597},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609},"abstract_content":"queryParams"},"$JT":{"start":{"line":96,"col":16,"offset":4697},"end":{"line":96,"col":39,"offset":4720},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$SQL":{"start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","shortlink":"https://sg.run/QqrQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":27186,"rule_id":"pKU01W","rv_id":1152300,"url":"https://semgrep.dev/playground/r/A8TXveK/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli","version_id":"A8TXveK"}}},"severity":"CRITICAL","fingerprint":"d704a569906d8cd344c24b5d7286506ffd0eec7626ea47f7672bfa706ee380c3133c4c9f3cff9feab42f64e2c529de66638122b187acbbbda30aadc36d207083_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":95,"col":22,"offset":4634},"end":{"line":95,"col":24,"offset":4636}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$RET":{"start":{"line":93,"col":12,"offset":4490},"end":{"line":93,"col":42,"offset":4520},"abstract_content":"ResponseEntity<CarInformation>"},"$METHOD":{"start":{"line":93,"col":43,"offset":4521},"end":{"line":93,"col":66,"offset":4544},"abstract_content":"getCarInformationLevel3"},"$REQ":{"start":{"line":94,"col":14,"offset":4559},"end":{"line":94,"col":26,"offset":4571},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":94,"col":33,"offset":4578},"end":{"line":94,"col":52,"offset":4597},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609},"abstract_content":"queryParams"},"$T":{"start":{"line":96,"col":16,"offset":4697},"end":{"line":96,"col":39,"offset":4720},"abstract_content":"applicationJdbcTemplate","propagated_value":{"svalue_start":{"line":50,"col":40,"offset":2404},"svalue_end":{"line":50,"col":63,"offset":2427},"svalue_abstract_content":"applicationJdbcTemplate"}},"$M":{"start":{"line":96,"col":40,"offset":4721},"end":{"line":96,"col":45,"offset":4726},"abstract_content":"query"},"$A":{"start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786},"abstract_content":"\"select * from cars where id='\"+id+\"'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in Java, it is possible to adopt prepared statements by using the `java.sql.PreparedStatement` class with bind variables.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Spring","functional-categories":["db::sink::query::SpringData","web::source::cookie::Spring","web::source::header::Spring","web::source::http-body::Spring","web::source::url-path-params::Spring","web::source::url-query-string::Spring"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["Spring","java"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","shortlink":"https://sg.run/QR1q","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40142,"rule_id":"JDUZ8z","rv_id":1152305,"url":"https://semgrep.dev/playground/r/K3TGA5W/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep","version_id":"K3TGA5W"}}},"severity":"CRITICAL","fingerprint":"c8d8cd41b40faeb0cb6d9db213c356d5177e05dac47b0e6207d57559cc82541fcc17ea7b29f159265a5b3f5d36bda23d19f0fa9f4577ca159ccd52055d4dc80e_0","lines":"                \"select * from cars where id='\" + id + \"'\", this::resultSetToResponse);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":94,"col":53,"offset":4598},"end":{"line":94,"col":64,"offset":4609}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":95,"col":22,"offset":4634},"end":{"line":95,"col":24,"offset":4636}},"content":"id"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","start":{"line":97,"col":17,"offset":4744},"end":{"line":97,"col":59,"offset":4786}},"\"select * from cars where id='\" + id + \"'\""]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-url-host.tainted-url-host","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":64,"col":21,"offset":2562},"end":{"line":64,"col":33,"offset":2574},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":61,"col":13,"offset":2395},"end":{"line":61,"col":51,"offset":2433},"abstract_content":"getGenericVulnerabilityResponseWhenURL"},"$REQ":{"start":{"line":61,"col":53,"offset":2435},"end":{"line":61,"col":65,"offset":2447},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":61,"col":76,"offset":2458},"end":{"line":61,"col":82,"offset":2464},"abstract_content":"String"},"$SOURCE":{"start":{"line":61,"col":83,"offset":2465},"end":{"line":61,"col":86,"offset":2468},"abstract_content":"url"},"$ONEARG":{"start":{"line":64,"col":29,"offset":2570},"end":{"line":64,"col":32,"offset":2573},"abstract_content":"url"}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/vkYn","semgrep.dev":{"rule":{"origin":"community","r_id":22077,"rule_id":"oqUZo8","rv_id":945747,"url":"https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host","version_id":"QkTZzLZ"}}},"severity":"ERROR","fingerprint":"2ea9edbac2915e5710c0b0e97b017cfda1ab137db91db51312968371222fe6de6684b987491f2bfb4c22611ac1d90d632d8d6bc01bdc37a259c419dfe3b4100c_0","lines":"            URL u = new URL(url);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":61,"col":83,"offset":2465},"end":{"line":61,"col":86,"offset":2468}},"url"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":61,"col":83,"offset":2465},"end":{"line":61,"col":86,"offset":2468}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":64,"col":21,"offset":2562},"end":{"line":64,"col":33,"offset":2574}},"new URL(url)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-url-host.tainted-url-host","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":127,"col":17,"offset":5384},"end":{"line":127,"col":29,"offset":5396},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":124,"col":69,"offset":5206},"end":{"line":124,"col":95,"offset":5232},"abstract_content":"getVulnerablePayloadLevel3"},"$REQ":{"start":{"line":125,"col":14,"offset":5247},"end":{"line":125,"col":26,"offset":5259},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":125,"col":37,"offset":5270},"end":{"line":125,"col":43,"offset":5276},"abstract_content":"String"},"$SOURCE":{"start":{"line":125,"col":44,"offset":5277},"end":{"line":125,"col":47,"offset":5280},"abstract_content":"url"},"$ONEARG":{"start":{"line":127,"col":25,"offset":5392},"end":{"line":127,"col":28,"offset":5395},"abstract_content":"url"}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/vkYn","semgrep.dev":{"rule":{"origin":"community","r_id":22077,"rule_id":"oqUZo8","rv_id":945747,"url":"https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host","version_id":"QkTZzLZ"}}},"severity":"ERROR","fingerprint":"3785daabf83d68df166ee0283413b222472d24f310a9353343de6b4924a6adfd02eff3cc5a4ce975372e3294d01cbe647cb32bc031e0f35ddc2919f80875d47a_0","lines":"            if (new URL(url).getHost().equals(\"169.254.169.254\")) {","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":125,"col":44,"offset":5277},"end":{"line":125,"col":47,"offset":5280}},"url"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":125,"col":44,"offset":5277},"end":{"line":125,"col":47,"offset":5280}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":127,"col":17,"offset":5384},"end":{"line":127,"col":29,"offset":5396}},"new URL(url)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-url-host.tainted-url-host","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":144,"col":47,"offset":6246},"end":{"line":144,"col":59,"offset":6258},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":141,"col":69,"offset":6038},"end":{"line":141,"col":95,"offset":6064},"abstract_content":"getVulnerablePayloadLevel4"},"$REQ":{"start":{"line":142,"col":14,"offset":6079},"end":{"line":142,"col":26,"offset":6091},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":142,"col":37,"offset":6102},"end":{"line":142,"col":43,"offset":6108},"abstract_content":"String"},"$SOURCE":{"start":{"line":142,"col":44,"offset":6109},"end":{"line":142,"col":47,"offset":6112},"abstract_content":"url"},"$ONEARG":{"start":{"line":144,"col":55,"offset":6254},"end":{"line":144,"col":58,"offset":6257},"abstract_content":"url"}},"message":"User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, hardcode the correct host, or ensure that the user data can only affect the path or parameters.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","interfile":true,"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host","shortlink":"https://sg.run/vkYn","semgrep.dev":{"rule":{"origin":"community","r_id":22077,"rule_id":"oqUZo8","rv_id":945747,"url":"https://semgrep.dev/playground/r/QkTZzLZ/java.spring.security.injection.tainted-url-host.tainted-url-host","version_id":"QkTZzLZ"}}},"severity":"ERROR","fingerprint":"0657ed68dca2a18c9ec5de9109f776525dc327af5ed2b3dd856b07106c92d18f30fc73221108519a617687415c45c356d96ac3da5a01424f81a8629973ec7797_0","lines":"            if (MetaDataServiceMock.isPresent(new URL(url))) {","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":142,"col":44,"offset":6109},"end":{"line":142,"col":47,"offset":6112}},"url"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":142,"col":44,"offset":6109},"end":{"line":142,"col":47,"offset":6112}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","start":{"line":144,"col":47,"offset":6246},"end":{"line":144,"col":59,"offset":6258}},"new URL(url)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":54,"col":17,"offset":2380},"end":{"line":54,"col":79,"offset":2442},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":48,"col":35,"offset":2135},"end":{"line":48,"col":61,"offset":2161},"abstract_content":"getVulnerablePayloadLevel1"},"$REQ":{"start":{"line":49,"col":14,"offset":2176},"end":{"line":49,"col":26,"offset":2188},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":49,"col":43,"offset":2205},"end":{"line":49,"col":49,"offset":2211},"abstract_content":"String"},"$SOURCE":{"start":{"line":49,"col":50,"offset":2212},"end":{"line":49,"col":63,"offset":2225},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":51,"col":52,"offset":2281},"end":{"line":51,"col":94,"offset":2323},"abstract_content":"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>"},"$PAYLOAD":{"start":{"line":54,"col":17,"offset":2380},"end":{"line":54,"col":79,"offset":2442},"abstract_content":"String.format(vulnerablePayloadWithPlaceHolder imageLocation)"},"$VAR":{"start":{"line":54,"col":31,"offset":2394},"end":{"line":54,"col":63,"offset":2426},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":51,"col":51,"offset":2280},"svalue_end":{"line":51,"col":95,"offset":2324},"svalue_abstract_content":"\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\""}}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_0","lines":"                String.format(vulnerablePayloadWithPlaceHolder, imageLocation), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":49,"col":50,"offset":2212},"end":{"line":49,"col":63,"offset":2225}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":49,"col":50,"offset":2212},"end":{"line":49,"col":63,"offset":2225}},"content":"imageLocation"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":54,"col":17,"offset":2380},"end":{"line":54,"col":79,"offset":2442}},"String.format(vulnerablePayloadWithPlaceHolder, imageLocation)"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":70,"col":37,"offset":3189},"end":{"line":70,"col":44,"offset":3196},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":63,"col":35,"offset":2867},"end":{"line":63,"col":61,"offset":2893},"abstract_content":"getVulnerablePayloadLevel2"},"$REQ":{"start":{"line":64,"col":14,"offset":2908},"end":{"line":64,"col":26,"offset":2920},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":64,"col":43,"offset":2937},"end":{"line":64,"col":49,"offset":2943},"abstract_content":"String"},"$SOURCE":{"start":{"line":64,"col":50,"offset":2944},"end":{"line":64,"col":63,"offset":2957},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":66,"col":52,"offset":3013},"end":{"line":66,"col":98,"offset":3059},"abstract_content":"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":68,"col":40,"offset":3102},"end":{"line":68,"col":72,"offset":3134},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":66,"col":51,"offset":3012},"svalue_end":{"line":66,"col":99,"offset":3060},"svalue_abstract_content":"\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":70,"col":37,"offset":3189},"end":{"line":70,"col":44,"offset":3196},"abstract_content":"payload","propagated_value":{"svalue_start":{"line":68,"col":26,"offset":3088},"svalue_end":{"line":68,"col":88,"offset":3150},"svalue_abstract_content":"String.format(vulnerablePayloadWithPlaceHolder imageLocation)"}}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_1","lines":"        return new ResponseEntity<>(payload, HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":64,"col":50,"offset":2944},"end":{"line":64,"col":63,"offset":2957}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":64,"col":50,"offset":2944},"end":{"line":64,"col":63,"offset":2957}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":68,"col":16,"offset":3078},"end":{"line":68,"col":23,"offset":3085}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":70,"col":37,"offset":3189},"end":{"line":70,"col":44,"offset":3196}},"payload"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":89,"col":37,"offset":4078},"end":{"line":89,"col":44,"offset":4085},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":79,"col":35,"offset":3664},"end":{"line":79,"col":61,"offset":3690},"abstract_content":"getVulnerablePayloadLevel3"},"$REQ":{"start":{"line":80,"col":14,"offset":3705},"end":{"line":80,"col":26,"offset":3717},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":80,"col":43,"offset":3734},"end":{"line":80,"col":49,"offset":3740},"abstract_content":"String"},"$SOURCE":{"start":{"line":80,"col":50,"offset":3741},"end":{"line":80,"col":63,"offset":3754},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":82,"col":52,"offset":3810},"end":{"line":82,"col":94,"offset":3852},"abstract_content":"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":86,"col":25,"offset":3936},"end":{"line":86,"col":57,"offset":3968},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":82,"col":51,"offset":3809},"svalue_end":{"line":82,"col":95,"offset":3853},"svalue_abstract_content":"\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":89,"col":37,"offset":4078},"end":{"line":89,"col":44,"offset":4085},"abstract_content":"payload","propagated_value":{"svalue_start":{"line":85,"col":17,"offset":3897},"svalue_end":{"line":87,"col":70,"offset":4039},"svalue_abstract_content":"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))"}}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_2","lines":"        return new ResponseEntity<>(payload, HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":80,"col":50,"offset":3741},"end":{"line":80,"col":63,"offset":3754}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":80,"col":50,"offset":3741},"end":{"line":80,"col":63,"offset":3754}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":84,"col":16,"offset":3871},"end":{"line":84,"col":23,"offset":3878}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":89,"col":37,"offset":4078},"end":{"line":89,"col":44,"offset":4085}},"payload"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":113,"col":37,"offset":5233},"end":{"line":113,"col":55,"offset":5251},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":100,"col":35,"offset":4664},"end":{"line":100,"col":61,"offset":4690},"abstract_content":"getVulnerablePayloadLevel4"},"$REQ":{"start":{"line":101,"col":14,"offset":4705},"end":{"line":101,"col":26,"offset":4717},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":101,"col":43,"offset":4734},"end":{"line":101,"col":49,"offset":4740},"abstract_content":"String"},"$SOURCE":{"start":{"line":101,"col":50,"offset":4741},"end":{"line":101,"col":63,"offset":4754},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":103,"col":52,"offset":4810},"end":{"line":103,"col":94,"offset":4852},"abstract_content":"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":109,"col":29,"offset":5076},"end":{"line":109,"col":61,"offset":5108},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":103,"col":51,"offset":4809},"svalue_end":{"line":103,"col":95,"offset":4853},"svalue_abstract_content":"\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":113,"col":37,"offset":5233},"end":{"line":113,"col":55,"offset":5251},"abstract_content":"payload.toString()"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_3","lines":"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":101,"col":50,"offset":4741},"end":{"line":101,"col":63,"offset":4754}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":101,"col":50,"offset":4741},"end":{"line":101,"col":63,"offset":4754}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":107,"col":13,"offset":4997},"end":{"line":107,"col":20,"offset":5004}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":113,"col":37,"offset":5233},"end":{"line":113,"col":55,"offset":5251}},"payload.toString()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":145,"col":37,"offset":6665},"end":{"line":145,"col":55,"offset":6683},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":123,"col":35,"offset":5754},"end":{"line":123,"col":61,"offset":5780},"abstract_content":"getVulnerablePayloadLevel5"},"$REQ":{"start":{"line":124,"col":14,"offset":5795},"end":{"line":124,"col":26,"offset":5807},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":124,"col":43,"offset":5824},"end":{"line":124,"col":49,"offset":5830},"abstract_content":"String"},"$SOURCE":{"start":{"line":124,"col":50,"offset":5831},"end":{"line":124,"col":63,"offset":5844},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":126,"col":52,"offset":5900},"end":{"line":126,"col":94,"offset":5942},"abstract_content":"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":141,"col":29,"offset":6508},"end":{"line":141,"col":61,"offset":6540},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":126,"col":51,"offset":5899},"svalue_end":{"line":126,"col":95,"offset":5943},"svalue_abstract_content":"\"<img src=%s width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":145,"col":37,"offset":6665},"end":{"line":145,"col":55,"offset":6683},"abstract_content":"payload.toString()"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_4","lines":"        return new ResponseEntity<>(payload.toString(), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":124,"col":50,"offset":5831},"end":{"line":124,"col":63,"offset":5844}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":124,"col":50,"offset":5831},"end":{"line":124,"col":63,"offset":5844}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":139,"col":13,"offset":6429},"end":{"line":139,"col":20,"offset":6436}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":145,"col":37,"offset":6665},"end":{"line":145,"col":55,"offset":6683}},"payload.toString()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":168,"col":41,"offset":7698},"end":{"line":168,"col":48,"offset":7705},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":157,"col":35,"offset":7207},"end":{"line":157,"col":61,"offset":7233},"abstract_content":"getVulnerablePayloadLevel6"},"$REQ":{"start":{"line":158,"col":14,"offset":7248},"end":{"line":158,"col":26,"offset":7260},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":158,"col":43,"offset":7277},"end":{"line":158,"col":49,"offset":7283},"abstract_content":"String"},"$SOURCE":{"start":{"line":158,"col":50,"offset":7284},"end":{"line":158,"col":63,"offset":7297},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":160,"col":52,"offset":7353},"end":{"line":160,"col":98,"offset":7399},"abstract_content":"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":165,"col":29,"offset":7548},"end":{"line":165,"col":61,"offset":7580},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":160,"col":51,"offset":7352},"svalue_end":{"line":160,"col":99,"offset":7400},"svalue_abstract_content":"\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":168,"col":41,"offset":7698},"end":{"line":168,"col":48,"offset":7705},"abstract_content":"payload","propagated_value":{"svalue_start":{"line":164,"col":21,"offset":7505},"svalue_end":{"line":166,"col":74,"offset":7655},"svalue_abstract_content":"String.format(vulnerablePayloadWithPlaceHolder StringEscapeUtils.escapeHtml4(imageLocation))"}}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_5","lines":"            return new ResponseEntity<>(payload, HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":158,"col":50,"offset":7284},"end":{"line":158,"col":63,"offset":7297}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":158,"col":50,"offset":7284},"end":{"line":158,"col":63,"offset":7297}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":163,"col":20,"offset":7475},"end":{"line":163,"col":27,"offset":7482}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":168,"col":41,"offset":7698},"end":{"line":168,"col":48,"offset":7705}},"payload"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":198,"col":41,"offset":9003},"end":{"line":198,"col":48,"offset":9010},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":185,"col":35,"offset":8380},"end":{"line":185,"col":66,"offset":8411},"abstract_content":"getVulnerablePayloadLevelSecure"},"$REQ":{"start":{"line":186,"col":14,"offset":8426},"end":{"line":186,"col":26,"offset":8438},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":186,"col":43,"offset":8455},"end":{"line":186,"col":49,"offset":8461},"abstract_content":"String"},"$SOURCE":{"start":{"line":186,"col":50,"offset":8462},"end":{"line":186,"col":63,"offset":8475},"abstract_content":"imageLocation"},"$HTMLSTR":{"start":{"line":187,"col":52,"offset":8530},"end":{"line":187,"col":98,"offset":8576},"abstract_content":"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>"},"$VAR":{"start":{"line":195,"col":29,"offset":8859},"end":{"line":195,"col":61,"offset":8891},"abstract_content":"vulnerablePayloadWithPlaceHolder","propagated_value":{"svalue_start":{"line":187,"col":51,"offset":8529},"svalue_end":{"line":187,"col":99,"offset":8577},"svalue_abstract_content":"\"<img src=\\\"%s\\\" width=\\\"400\\\" height=\\\"300\\\"/>\""}},"$PAYLOAD":{"start":{"line":198,"col":41,"offset":9003},"end":{"line":198,"col":48,"offset":9010},"abstract_content":"payload","propagated_value":{"svalue_start":{"line":194,"col":21,"offset":8816},"svalue_end":{"line":196,"col":68,"offset":8960},"svalue_abstract_content":"String.format(vulnerablePayloadWithPlaceHolder HtmlUtils.htmlEscapeHex(imageLocation))"}}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"dfa9e1ed9f90e792c626945dfe7766fa3588f2992776664eda31542a612d2e6966a7eae822e7e953d6c1d4068d234fb23903ee81c6e5ac6a34ff2f8a0321a708_6","lines":"            return new ResponseEntity<>(payload, HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":186,"col":50,"offset":8462},"end":{"line":186,"col":63,"offset":8475}},"imageLocation"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":186,"col":50,"offset":8462},"end":{"line":186,"col":63,"offset":8475}},"content":"imageLocation"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":193,"col":20,"offset":8786},"end":{"line":193,"col":27,"offset":8793}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","start":{"line":198,"col":41,"offset":9003},"end":{"line":198,"col":48,"offset":9010}},"payload"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":38,"col":43,"offset":1710},"end":{"line":38,"col":61,"offset":1728},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":31,"col":35,"offset":1286},"end":{"line":31,"col":61,"offset":1312},"abstract_content":"getVulnerablePayloadLevel1"},"$REQ":{"start":{"line":32,"col":14,"offset":1327},"end":{"line":32,"col":26,"offset":1339},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":32,"col":27,"offset":1340},"end":{"line":32,"col":46,"offset":1359},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":32,"col":47,"offset":1360},"end":{"line":32,"col":58,"offset":1371},"abstract_content":"queryParams"},"$HTMLSTR":{"start":{"line":33,"col":52,"offset":1426},"end":{"line":33,"col":64,"offset":1438},"abstract_content":"<div>%s<div>"},"$VAR":{"start":{"line":36,"col":42,"offset":1606},"end":{"line":36,"col":74,"offset":1638},"abstract_content":"vulnerablePayloadWithPlaceHolder"},"$ERROR":{"start":{"line":38,"col":35,"offset":1702},"end":{"line":38,"col":41,"offset":1708},"abstract_content":"String"},"$PAYLOAD":{"start":{"line":38,"col":43,"offset":1710},"end":{"line":38,"col":61,"offset":1728},"abstract_content":"payload.toString()"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"a7e118ac25284609e320b09b41eabe0ba06879913f4df7fc5dd29986b855d2b1433418c3a0821045a9f25e050410709a1ec0f2039f92691ea905404c5a22561c_0","lines":"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":32,"col":47,"offset":1360},"end":{"line":32,"col":58,"offset":1371}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":32,"col":47,"offset":1360},"end":{"line":32,"col":58,"offset":1371}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":35,"col":40,"offset":1533},"end":{"line":35,"col":43,"offset":1536}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":35,"col":40,"offset":1533},"end":{"line":35,"col":43,"offset":1536}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":36,"col":13,"offset":1577},"end":{"line":36,"col":20,"offset":1584}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":38,"col":43,"offset":1710},"end":{"line":38,"col":61,"offset":1728}},"payload.toString()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":61,"col":43,"offset":2930},"end":{"line":61,"col":61,"offset":2948},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":50,"col":35,"offset":2314},"end":{"line":50,"col":61,"offset":2340},"abstract_content":"getVulnerablePayloadLevel2"},"$REQ":{"start":{"line":51,"col":14,"offset":2355},"end":{"line":51,"col":26,"offset":2367},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":51,"col":27,"offset":2368},"end":{"line":51,"col":46,"offset":2387},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":51,"col":47,"offset":2388},"end":{"line":51,"col":58,"offset":2399},"abstract_content":"queryParams"},"$HTMLSTR":{"start":{"line":52,"col":52,"offset":2454},"end":{"line":52,"col":64,"offset":2466},"abstract_content":"<div>%s<div>"},"$VAR":{"start":{"line":58,"col":46,"offset":2812},"end":{"line":58,"col":78,"offset":2844},"abstract_content":"vulnerablePayloadWithPlaceHolder"},"$ERROR":{"start":{"line":61,"col":35,"offset":2922},"end":{"line":61,"col":41,"offset":2928},"abstract_content":"String"},"$PAYLOAD":{"start":{"line":61,"col":43,"offset":2930},"end":{"line":61,"col":61,"offset":2948},"abstract_content":"payload.toString()"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"a7e118ac25284609e320b09b41eabe0ba06879913f4df7fc5dd29986b855d2b1433418c3a0821045a9f25e050410709a1ec0f2039f92691ea905404c5a22561c_1","lines":"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":51,"col":47,"offset":2388},"end":{"line":51,"col":58,"offset":2399}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":51,"col":47,"offset":2388},"end":{"line":51,"col":58,"offset":2399}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":55,"col":40,"offset":2637},"end":{"line":55,"col":43,"offset":2640}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":55,"col":40,"offset":2637},"end":{"line":55,"col":43,"offset":2640}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":58,"col":17,"offset":2783},"end":{"line":58,"col":24,"offset":2790}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":61,"col":43,"offset":2930},"end":{"line":61,"col":61,"offset":2948}},"payload.toString()"]]},"engine_kind":"OSS"}},{"check_id":"java.spring.security.injection.tainted-html-string.tainted-html-string","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":86,"col":43,"offset":4355},"end":{"line":86,"col":61,"offset":4373},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":13,"offset":12},"abstract_content":"RequestParam"},"$METHODNAME":{"start":{"line":73,"col":35,"offset":3620},"end":{"line":73,"col":61,"offset":3646},"abstract_content":"getVulnerablePayloadLevel3"},"$REQ":{"start":{"line":74,"col":14,"offset":3661},"end":{"line":74,"col":26,"offset":3673},"abstract_content":"RequestParam"},"$TYPE":{"start":{"line":74,"col":27,"offset":3674},"end":{"line":74,"col":46,"offset":3693},"abstract_content":"Map<String String>"},"$SOURCE":{"start":{"line":74,"col":47,"offset":3694},"end":{"line":74,"col":58,"offset":3705},"abstract_content":"queryParams"},"$HTMLSTR":{"start":{"line":75,"col":52,"offset":3760},"end":{"line":75,"col":64,"offset":3772},"abstract_content":"<div>%s<div>"},"$VAR":{"start":{"line":83,"col":46,"offset":4237},"end":{"line":83,"col":78,"offset":4269},"abstract_content":"vulnerablePayloadWithPlaceHolder"},"$ERROR":{"start":{"line":86,"col":35,"offset":4347},"end":{"line":86,"col":41,"offset":4353},"abstract_content":"String"},"$PAYLOAD":{"start":{"line":86,"col":43,"offset":4355},"end":{"line":86,"col":61,"offset":4373},"abstract_content":"payload.toString()"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"],"category":"security","technology":["java","spring"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string","shortlink":"https://sg.run/ObdR","semgrep.dev":{"rule":{"origin":"community","r_id":22075,"rule_id":"YGUvkL","rv_id":945744,"url":"https://semgrep.dev/playground/r/LjTXyJP/java.spring.security.injection.tainted-html-string.tainted-html-string","version_id":"LjTXyJP"}}},"severity":"ERROR","fingerprint":"a7e118ac25284609e320b09b41eabe0ba06879913f4df7fc5dd29986b855d2b1433418c3a0821045a9f25e050410709a1ec0f2039f92691ea905404c5a22561c_2","lines":"        return new ResponseEntity<String>(payload.toString(), HttpStatus.OK);","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":74,"col":47,"offset":3694},"end":{"line":74,"col":58,"offset":3705}},"queryParams"]],"intermediate_vars":[{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":74,"col":47,"offset":3694},"end":{"line":74,"col":58,"offset":3705}},"content":"queryParams"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":78,"col":40,"offset":3943},"end":{"line":78,"col":43,"offset":3946}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":78,"col":40,"offset":3943},"end":{"line":78,"col":43,"offset":3946}},"content":"map"},{"location":{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":83,"col":17,"offset":4208},"end":{"line":83,"col":24,"offset":4215}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","start":{"line":86,"col":43,"offset":4355},"end":{"line":86,"col":61,"offset":4373}},"payload.toString()"]]},"engine_kind":"OSS"}},{"check_id":"generic.secrets.security.detected-jwt-token.detected-jwt-token","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/JWTVulnerabilityPayload.properties","start":{"line":1,"col":122,"offset":121},"end":{"line":1,"col":233,"offset":232},"extra":{"metavars":{},"message":"JWT token detected","metadata":{"source-rule-url":"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py","category":"security","technology":["secrets","jwt"],"confidence":"LOW","references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"cwe":["CWE-321: Use of Hard-coded Cryptographic Key"],"owasp":["A02:2021 - Cryptographic Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token","shortlink":"https://sg.run/05N5","semgrep.dev":{"rule":{"origin":"community","r_id":12854,"rule_id":"kxU8E8","rv_id":945504,"url":"https://semgrep.dev/playground/r/PkTQZeN/generic.secrets.security.detected-jwt-token.detected-jwt-token","version_id":"PkTQZeN"}}},"severity":"ERROR","fingerprint":"7236f9408c6e6db4bb5b98650cfc9677a82291725cd347aa1de237eb3f50a4ff0d07be0fc7d5ccfbf93019d689de3a39d6e9e371192244d8d37049dfa34691a5_0","lines":"NONE_ALGORITHM_ATTACK_CURL_PAYLOAD=curl 'http://localhost:9090/vulnerable/JWTVulnerability/LEVEL_6' -H 'Cookie: JWTToken=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js","start":{"line":22,"col":3,"offset":789},"end":{"line":22,"col":64,"offset":850},"extra":{"metavars":{"$EL":{"start":{"line":22,"col":3,"offset":789},"end":{"line":22,"col":38,"offset":824},"abstract_content":"document.getElementById(\"response\")"},"$HTML":{"start":{"line":22,"col":51,"offset":837},"end":{"line":22,"col":63,"offset":849},"abstract_content":"data.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"7c75e7076263c9033b16f80596dfbeb69e04e59ed773bf86d751b9526ac1712d9df5ffc21884fa6fb30d1c9907dfe37bd2d6ce2d1d4920ee7ed2783370b9ed9d_0","lines":"  document.getElementById(\"response\").innerHTML = data.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js","start":{"line":14,"col":3,"offset":386},"end":{"line":14,"col":75,"offset":458},"extra":{"metavars":{"$EL":{"start":{"line":14,"col":3,"offset":386},"end":{"line":14,"col":49,"offset":432},"abstract_content":"document.getElementById(\"pingUtilityResponse\")"},"$HTML":{"start":{"line":14,"col":62,"offset":445},"end":{"line":14,"col":74,"offset":457},"abstract_content":"data.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"d2893b9075d8005d03a3db5284b6377b69bf16ba8bcd374b67eeab94d53e73233281e09f0747af861d148e1abd6e1439ba9aa861ca32c4d67ca0f830e5dfabd3_0","lines":"  document.getElementById(\"pingUtilityResponse\").innerHTML = data.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","start":{"line":17,"col":5,"offset":458},"end":{"line":18,"col":72,"offset":583},"extra":{"metavars":{"$EL":{"start":{"line":17,"col":5,"offset":458},"end":{"line":17,"col":46,"offset":499},"abstract_content":"document.getElementById(\"carInformation\")"},"$HTML":{"start":{"line":18,"col":7,"offset":518},"end":{"line":18,"col":71,"offset":582},"abstract_content":"\"<img src='\"+data.carInformation.imagePath+\"' width='900'/>\""}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"902173b9fc491ac1c9c805cf9cb130b6f45bf5975b1a4cf2e2c7250d7db3259871d0e2d5cfebb145f5ef095f9210a03d5e92ab63f028ed750f98729bbc86a76b_0","lines":"    document.getElementById(\"carInformation\").innerHTML =\n      \"<img src='\" + data.carInformation.imagePath + \"' width='900'/>\";","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js","start":{"line":25,"col":5,"offset":854},"end":{"line":26,"col":66,"offset":979},"extra":{"metavars":{"$EL":{"start":{"line":25,"col":5,"offset":854},"end":{"line":25,"col":52,"offset":901},"abstract_content":"document.getElementById(\"verificationResponse\")"},"$HTML":{"start":{"line":26,"col":7,"offset":920},"end":{"line":26,"col":65,"offset":978},"abstract_content":"\"JWT: \"+data.content+\" is not valid. Please try again\""}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"a9aa76f3cbbb8d670620c5a2bb0b544fac5c7cde8527b412bd33d6c9053c8a028fd5430fec36df8e2e3ecca58b0c090ee5d0ddd9489de4a865d717e89b7fc788_0","lines":"    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js","start":{"line":24,"col":5,"offset":767},"end":{"line":25,"col":66,"offset":892},"extra":{"metavars":{"$EL":{"start":{"line":24,"col":5,"offset":767},"end":{"line":24,"col":52,"offset":814},"abstract_content":"document.getElementById(\"verificationResponse\")"},"$HTML":{"start":{"line":25,"col":7,"offset":833},"end":{"line":25,"col":65,"offset":891},"abstract_content":"\"JWT: \"+data.content+\" is not valid. Please try again\""}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"d2a539d81fe9ae7fa3b5c00645af9b251c00bda3884c669442daf33f4164ce300aa48ba6ceff5b339ac7a90f2110d3efb696c52e7c7b062b56d0e5c04d88c152_0","lines":"    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js","start":{"line":30,"col":3,"offset":938},"end":{"line":30,"col":59,"offset":994},"extra":{"metavars":{"$EL":{"start":{"line":30,"col":3,"offset":938},"end":{"line":30,"col":33,"offset":968},"abstract_content":"document.getElementById(\"jwt\")"},"$HTML":{"start":{"line":30,"col":46,"offset":981},"end":{"line":30,"col":58,"offset":993},"abstract_content":"data.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"0fb4b6ba402b211cc2e0db136de2268d61c7e9b65e26e23553f203f7ab976a3edacc0193e7deb70e1645c6f8434448f9baaf3f520d5a09cb3c6c1cfcf6a14e62_0","lines":"  document.getElementById(\"jwt\").innerHTML = data.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js","start":{"line":35,"col":5,"offset":1012},"end":{"line":36,"col":66,"offset":1137},"extra":{"metavars":{"$EL":{"start":{"line":35,"col":5,"offset":1012},"end":{"line":35,"col":52,"offset":1059},"abstract_content":"document.getElementById(\"verificationResponse\")"},"$HTML":{"start":{"line":36,"col":7,"offset":1078},"end":{"line":36,"col":65,"offset":1136},"abstract_content":"\"JWT: \"+data.content+\" is not valid. Please try again\""}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"bc7fcfff5ad30f1f268898c56c5d235286b13a388db99a66507fd390aa7a28909aa4692bec175f2d9f9d910290b639ae1b413b2300e09d1e6710053ce56efb79_0","lines":"    document.getElementById(\"verificationResponse\").innerHTML =\n      \"JWT: \" + data.content + \" is not valid. Please try again\";","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js","start":{"line":41,"col":3,"offset":1183},"end":{"line":41,"col":59,"offset":1239},"extra":{"metavars":{"$EL":{"start":{"line":41,"col":3,"offset":1183},"end":{"line":41,"col":33,"offset":1213},"abstract_content":"document.getElementById(\"jwt\")"},"$HTML":{"start":{"line":41,"col":46,"offset":1226},"end":{"line":41,"col":58,"offset":1238},"abstract_content":"data.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"db850876bd11ff78b5319e1309faec349704e66fc97d4cf41b07969cf9d999860dc3bce7a8caacc03e654abc12f5e5d908fd3818b5ae2a4bb2f1f7c57c380c78_0","lines":"  document.getElementById(\"jwt\").innerHTML = data.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"generic.secrets.security.detected-private-key.detected-private-key","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem","start":{"line":5,"col":1,"offset":146},"end":{"line":6,"col":65,"offset":238},"extra":{"metavars":{"$KEY":{"start":{"line":6,"col":1,"offset":174},"end":{"line":6,"col":65,"offset":238},"abstract_content":"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi"}},"message":"Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.","metadata":{"cwe":["CWE-798: Use of Hard-coded Credentials"],"source-rule-url":"https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go","category":"security","technology":["secrets"],"confidence":"LOW","owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key","shortlink":"https://sg.run/b7dr","semgrep.dev":{"rule":{"origin":"community","r_id":9070,"rule_id":"7KUQ0p","rv_id":945514,"url":"https://semgrep.dev/playground/r/K3TJbgy/generic.secrets.security.detected-private-key.detected-private-key","version_id":"K3TJbgy"}}},"severity":"ERROR","fingerprint":"5cdba039e2bd11446cb354090aebf6409c2de44349a894887d7472a3775738c25adb23e1877a380a97b865eb5ebd7fa9228d49db2f412507d0ac4fbcc2a66231_0","lines":"-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDG86CoStCZbgTi","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js","start":{"line":35,"col":5,"offset":1098},"end":{"line":35,"col":73,"offset":1166},"extra":{"metavars":{"$EL":{"start":{"line":35,"col":5,"offset":1098},"end":{"line":35,"col":43,"offset":1136},"abstract_content":"document.getElementById(\"Information\")"},"$HTML":{"start":{"line":35,"col":56,"offset":1149},"end":{"line":35,"col":72,"offset":1165},"abstract_content":"tableInformation","propagated_value":{"svalue_start":{"line":34,"col":24,"offset":1063},"svalue_end":{"line":34,"col":53,"offset":1092},"svalue_abstract_content":"tableInformation+\"</table>\""}}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"4710fff7870ac2b37a60a82742195801c855731da660a30131d5dc4e6dab1238b2a55c8f03631dfff6c5d8974fe37737cb9df54e27b52a17cd13559c524cf244_0","lines":"    document.getElementById(\"Information\").innerHTML = tableInformation;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js","start":{"line":17,"col":3,"offset":420},"end":{"line":17,"col":36,"offset":453},"extra":{"metavars":{"$EL":{"start":{"line":17,"col":3,"offset":420},"end":{"line":17,"col":10,"offset":427},"abstract_content":"postDiv"},"$HTML":{"start":{"line":17,"col":23,"offset":440},"end":{"line":17,"col":35,"offset":452},"abstract_content":"post.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"6349e89f04c6dd0e019eb1ff629a5c2a2cb7065056a3b9b0706ff5cd1edec68cc1575f4dbfdc7561f9ee783a31b280d335baabdecb0439a75ca5766854c10633_0","lines":"  postDiv.innerHTML = post.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js","start":{"line":22,"col":3,"offset":559},"end":{"line":22,"col":56,"offset":612},"extra":{"metavars":{"$EL":{"start":{"line":22,"col":3,"offset":559},"end":{"line":22,"col":38,"offset":594},"abstract_content":"document.getElementById(\"allPosts\")"},"$HTML":{"start":{"line":22,"col":51,"offset":607},"end":{"line":22,"col":55,"offset":611},"abstract_content":"data"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"20152e75702665f846579315bd9e519227baa49d3bf965b2558a1224d89cbd474bc75a7820f799e5e0eb56c0f8d832a932681a186e71f41f3707950076b641d5_0","lines":"  document.getElementById(\"allPosts\").innerHTML = data;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js","start":{"line":24,"col":5,"offset":720},"end":{"line":24,"col":78,"offset":793},"extra":{"metavars":{"$EL":{"start":{"line":24,"col":5,"offset":720},"end":{"line":24,"col":48,"offset":763},"abstract_content":"document.getElementById(\"projectsResponse\")"},"$HTML":{"start":{"line":24,"col":61,"offset":776},"end":{"line":24,"col":77,"offset":792},"abstract_content":"tableInformation","propagated_value":{"svalue_start":{"line":23,"col":24,"offset":688},"svalue_end":{"line":23,"col":50,"offset":714},"svalue_abstract_content":"tableInformation+\"</tr>\""}}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"96632997c97b0e3134773222771e64955f5ec7eb99dbcf89cccc9a18e7699f3ee82a8608e99c6e904fd50b426a5bb82d72a611d9d34aef579988a4c270db1791_0","lines":"    document.getElementById(\"projectsResponse\").innerHTML = tableInformation;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","start":{"line":16,"col":3,"offset":429},"end":{"line":17,"col":55,"offset":537},"extra":{"metavars":{"$EL":{"start":{"line":16,"col":3,"offset":429},"end":{"line":16,"col":44,"offset":470},"abstract_content":"document.getElementById(\"carInformation\")"},"$HTML":{"start":{"line":17,"col":5,"offset":487},"end":{"line":17,"col":54,"offset":536},"abstract_content":"\"<img src='\"+data.imagePath+\"' width='900'/>\""}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"6f811f6a50422048bebc32a24194e486b540437d39c1ac44c85a1b4111fbe45633eb2d690fc6c2952b869df0b02f2a2f58a2a7b1f46608a26e9b7ccb6d05b80f_0","lines":"  document.getElementById(\"carInformation\").innerHTML =\n    \"<img src='\" + data.imagePath + \"' width='900'/>\";","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js","start":{"line":14,"col":3,"offset":445},"end":{"line":16,"col":20,"offset":585},"extra":{"metavars":{"$EL":{"start":{"line":14,"col":3,"offset":445},"end":{"line":14,"col":48,"offset":490},"abstract_content":"document.getElementById(\"uploaded_file_info\")"},"$HTML":{"start":{"line":14,"col":61,"offset":503},"end":{"line":16,"col":19,"offset":584},"abstract_content":"data.isValid\"File uploaded at location:\"+data.content data.content"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"85220bbd69a3d4c23641814a8794ff196c54ae4d6119e02c639ea20c18cdde613f2b426cf4c6707d26e8f8caeaa8a00b09dfc8886e3394f5909f12ef0cae5571_0","lines":"  document.getElementById(\"uploaded_file_info\").innerHTML = data.isValid\n    ? \"File uploaded at location:\" + data.content\n    : data.content;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js","start":{"line":16,"col":3,"offset":434},"end":{"line":16,"col":53,"offset":484},"extra":{"metavars":{"$EL":{"start":{"line":16,"col":3,"offset":434},"end":{"line":16,"col":35,"offset":466},"abstract_content":"document.getElementById(\"image\")"},"$HTML":{"start":{"line":16,"col":48,"offset":479},"end":{"line":16,"col":52,"offset":483},"abstract_content":"data"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"e21d3beeaf967c092f36ecefdb802db723d021cfeea2ec60a0734a741ee84d2793815ad03e0b0634aaaa1c67263062bbefdeee5cc45fa2d3ed78cedee57bb8ed_0","lines":"  document.getElementById(\"image\").innerHTML = data;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js","start":{"line":15,"col":3,"offset":466},"end":{"line":15,"col":36,"offset":499},"extra":{"metavars":{"$EL":{"start":{"line":15,"col":3,"offset":466},"end":{"line":15,"col":18,"offset":481},"abstract_content":"parentContainer","propagated_value":{"svalue_start":{"line":14,"col":25,"offset":420},"svalue_end":{"line":14,"col":67,"offset":462},"svalue_abstract_content":"document.getElementById(\"parentContainer\")"}},"$HTML":{"start":{"line":15,"col":31,"offset":494},"end":{"line":15,"col":35,"offset":498},"abstract_content":"data"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"ae1344cdc60dbb8a3e44c054ff2910e2211a06f1aa971793e29509e73323a0ddf8258416fc2c93738e8f43553b65eb59c44f26aca348dc4718da8225d536c12e_0","lines":"  parentContainer.innerHTML = data;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js","start":{"line":14,"col":3,"offset":405},"end":{"line":14,"col":53,"offset":455},"extra":{"metavars":{"$EL":{"start":{"line":14,"col":3,"offset":405},"end":{"line":14,"col":35,"offset":437},"abstract_content":"document.getElementById(\"image\")"},"$HTML":{"start":{"line":14,"col":48,"offset":450},"end":{"line":14,"col":52,"offset":454},"abstract_content":"data"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"bfe3212a744c4f9e446dc9ccb91836c8e666266ba85c9653063a1eef3981ca3285b9c6643eca5522d8a028f45e56742e63f0ec9395ceb7c9534a094afb249a48_0","lines":"  document.getElementById(\"image\").innerHTML = data;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":18,"col":3,"offset":513},"end":{"line":18,"col":40,"offset":550},"extra":{"metavars":{"$EL":{"start":{"line":18,"col":3,"offset":513},"end":{"line":18,"col":18,"offset":528},"abstract_content":"bookNameElement","propagated_value":{"svalue_start":{"line":17,"col":25,"offset":469},"svalue_end":{"line":17,"col":65,"offset":509},"svalue_abstract_content":"xmlRequestDocument.createElement(\"name\")"}},"$HTML":{"start":{"line":18,"col":31,"offset":541},"end":{"line":18,"col":39,"offset":549},"abstract_content":"bookName"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"a890fc683c3a1d4ab1acba53f28f9a61e44198c66c1f8a6ecf9bb67c8f4b6c703a317556cbef877393dc94af7941601d47424f909ff1196e4f21bcda768f9853_0","lines":"  bookNameElement.innerHTML = bookName;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":22,"col":3,"offset":664},"end":{"line":22,"col":36,"offset":697},"extra":{"metavars":{"$EL":{"start":{"line":22,"col":3,"offset":664},"end":{"line":22,"col":16,"offset":677},"abstract_content":"authorElement","propagated_value":{"svalue_start":{"line":21,"col":23,"offset":618},"svalue_end":{"line":21,"col":65,"offset":660},"svalue_abstract_content":"xmlRequestDocument.createElement(\"author\")"}},"$HTML":{"start":{"line":22,"col":29,"offset":690},"end":{"line":22,"col":35,"offset":696},"abstract_content":"author"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"300e0a696051c1bf7f525f21edc2e226f57b131edf74fcb967c9319e8184474bdbb4c21aef60a05a91be37732edea9c7baa492f5c4748877879de566799ca6c3_0","lines":"  authorElement.innerHTML = author;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":26,"col":3,"offset":805},"end":{"line":26,"col":32,"offset":834},"extra":{"metavars":{"$EL":{"start":{"line":26,"col":3,"offset":805},"end":{"line":26,"col":14,"offset":816},"abstract_content":"isbnElement","propagated_value":{"svalue_start":{"line":25,"col":21,"offset":761},"svalue_end":{"line":25,"col":61,"offset":801},"svalue_abstract_content":"xmlRequestDocument.createElement(\"isbn\")"}},"$HTML":{"start":{"line":26,"col":27,"offset":829},"end":{"line":26,"col":31,"offset":833},"abstract_content":"isbn"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"5256609535fab1ceb9cc691623d965ba90361df56026cf113b984bec16d135acb63dca60bfeaa6b9b98c5f165343f58023fdbb3be44e1143a3f3bae7882c8aca_0","lines":"  isbnElement.innerHTML = isbn;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":30,"col":3,"offset":950},"end":{"line":30,"col":42,"offset":989},"extra":{"metavars":{"$EL":{"start":{"line":30,"col":3,"offset":950},"end":{"line":30,"col":19,"offset":966},"abstract_content":"publisherElement","propagated_value":{"svalue_start":{"line":29,"col":26,"offset":901},"svalue_end":{"line":29,"col":71,"offset":946},"svalue_abstract_content":"xmlRequestDocument.createElement(\"publisher\")"}},"$HTML":{"start":{"line":30,"col":32,"offset":979},"end":{"line":30,"col":41,"offset":988},"abstract_content":"publisher"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"fbce9ef73fca1ff64429b0f8b529bdecde77c774e612186234783c889483efa529c1945c9982ef84485f2119ca0c5c50f5452f47f56e39aec2cce93814e2f127_0","lines":"  publisherElement.innerHTML = publisher;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":34,"col":3,"offset":1103},"end":{"line":34,"col":42,"offset":1142},"extra":{"metavars":{"$EL":{"start":{"line":34,"col":3,"offset":1103},"end":{"line":34,"col":15,"offset":1115},"abstract_content":"otherElement","propagated_value":{"svalue_start":{"line":33,"col":22,"offset":1057},"svalue_end":{"line":33,"col":64,"offset":1099},"svalue_abstract_content":"xmlRequestDocument.createElement(\"others\")"}},"$HTML":{"start":{"line":34,"col":28,"offset":1128},"end":{"line":34,"col":41,"offset":1141},"abstract_content":"otherComments"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"bb267470875faedb3bced0762388384b1890929a3c1b05c0595650a8ca092bd44c556cbb1c3b3b38914fc0a28e5c2410dcd6aab1b8e42516a8fa2cb1832addef_0","lines":"  otherElement.innerHTML = otherComments;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","start":{"line":78,"col":3,"offset":2333},"end":{"line":78,"col":63,"offset":2393},"extra":{"metavars":{"$EL":{"start":{"line":78,"col":3,"offset":2333},"end":{"line":78,"col":45,"offset":2375},"abstract_content":"document.getElementById(\"bookInformation\")"},"$HTML":{"start":{"line":78,"col":58,"offset":2388},"end":{"line":78,"col":62,"offset":2392},"abstract_content":"data"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"5680e5f18c0ebab19a3c16d5358e86b6155c1f93af08d5e1b9f70bea3d0957b0bba81031e369622800ede73af3911eb23a402495fa6b2e5e3e079461059e8c73_0","lines":"  document.getElementById(\"bookInformation\").innerHTML = data;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":57,"col":5,"offset":1875},"end":{"line":58,"col":52,"offset":1990},"extra":{"metavars":{"$EL":{"start":{"line":57,"col":5,"offset":1875},"end":{"line":57,"col":56,"offset":1926},"abstract_content":"document.getElementById(\"vulnerabilityDescription\")"},"$HTML":{"start":{"line":58,"col":7,"offset":1945},"end":{"line":58,"col":51,"offset":1989},"abstract_content":"vulnerableAppEndPointData[id][\"Description\"]"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"605b17c415d28702dc57cf41eb6276ebacdba1c0be5a3e4783819a155a1b8af6e12db8a687524f1c44461155b16b35b75b301d33e136e6b1bf9e4c5cd0c3b1ea_0","lines":"    document.getElementById(\"vulnerabilityDescription\").innerHTML =\n      vulnerableAppEndPointData[id][\"Description\"];","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":72,"col":7,"offset":2603},"end":{"line":72,"col":44,"offset":2640},"extra":{"metavars":{"$EL":{"start":{"line":72,"col":7,"offset":2603},"end":{"line":72,"col":18,"offset":2614},"abstract_content":"detailTitle"},"$HTML":{"start":{"line":72,"col":31,"offset":2627},"end":{"line":72,"col":43,"offset":2639},"abstract_content":"responseText"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"6e12b57426e3e63636fb01617ff9c73d59ec722106c79d82947f6a690852544fad497c481412198ff4b70e68970243ad20ffc4655a855b6c50a2e4ab04782a85_0","lines":"      detailTitle.innerHTML = responseText;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":108,"col":3,"offset":3677},"end":{"line":108,"col":79,"offset":3753},"extra":{"metavars":{"$EL":{"start":{"line":108,"col":3,"offset":3677},"end":{"line":108,"col":7,"offset":3681},"abstract_content":"span"},"$HTML":{"start":{"line":108,"col":20,"offset":3694},"end":{"line":108,"col":78,"offset":3752},"abstract_content":"isSecure variantTooltip.secure variantTooltip.unsecure"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"4b0cfd77598d0798858bbf10e4b49f355229f1f999a92c488964a89333b9d6df51e58caee8553c235b940f0d7ea4e53e119d29f178a4531941aefed2fa0b50b2_0","lines":"  span.innerHTML = isSecure ? variantTooltip.secure : variantTooltip.unsecure;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":163,"col":5,"offset":5272},"end":{"line":163,"col":74,"offset":5341},"extra":{"metavars":{"$EL":{"start":{"line":163,"col":5,"offset":5272},"end":{"line":163,"col":16,"offset":5283},"abstract_content":"detailTitle"},"$HTML":{"start":{"line":163,"col":29,"offset":5296},"end":{"line":163,"col":73,"offset":5340},"abstract_content":"vulnerableAppEndPointData[id][\"Description\"]"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"87342425c14e8faaa1c2a997dec2b7dbc5bba42cd38d0363f2f8c53f3cdabce818a95e77d65ff5a2b64712d504f6c47aa8a467aef1cdba8de89c6f91aa3ee42c_0","lines":"    detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":169,"col":3,"offset":5457},"end":{"line":169,"col":72,"offset":5526},"extra":{"metavars":{"$EL":{"start":{"line":169,"col":3,"offset":5457},"end":{"line":169,"col":14,"offset":5468},"abstract_content":"detailTitle"},"$HTML":{"start":{"line":169,"col":27,"offset":5481},"end":{"line":169,"col":71,"offset":5525},"abstract_content":"vulnerableAppEndPointData[id][\"Description\"]"}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"87342425c14e8faaa1c2a997dec2b7dbc5bba42cd38d0363f2f8c53f3cdabce818a95e77d65ff5a2b64712d504f6c47aa8a467aef1cdba8de89c6f91aa3ee42c_1","lines":"  detailTitle.innerHTML = vulnerableAppEndPointData[id][\"Description\"];","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"javascript.browser.security.insecure-document-method.insecure-document-method","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js","start":{"line":308,"col":5,"offset":9834},"end":{"line":308,"col":62,"offset":9891},"extra":{"metavars":{"$EL":{"start":{"line":308,"col":5,"offset":9834},"end":{"line":308,"col":40,"offset":9869},"abstract_content":"document.getElementById(\"helpText\")"},"$HTML":{"start":{"line":308,"col":53,"offset":9882},"end":{"line":308,"col":61,"offset":9890},"abstract_content":"helpText","propagated_value":{"svalue_start":{"line":307,"col":16,"offset":9810},"svalue_end":{"line":307,"col":34,"offset":9828},"svalue_abstract_content":"helpText+\"</ol>\""}}},"message":"User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["browser"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","references":["https://owasp.org/Top10/A03_2021-Injection"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method","shortlink":"https://sg.run/LwA9","semgrep.dev":{"rule":{"origin":"community","r_id":9239,"rule_id":"ReUg41","rv_id":945779,"url":"https://semgrep.dev/playground/r/zyTlk9P/javascript.browser.security.insecure-document-method.insecure-document-method","version_id":"zyTlk9P"}}},"severity":"ERROR","fingerprint":"6e9f273654a488f7f1b7024c946b48357b21b4750573c0607ebeacabdf3965163e27c5a59012f7b73b03feaf73f24ba85293ee8be28f56ced9cd6e42711ed95d_0","lines":"    document.getElementById(\"helpText\").innerHTML = helpText;","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm","message":"Internal matching error when running javascript.crypto-js.cryptojs-weak-algorithm.cryptojs-weak-algorithm on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.express.web.cors-default-config-express.cors-default-config-express","message":"Internal matching error when running javascript.express.web.cors-default-config-express.cors-default-config-express on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js"},{"code":2,"level":"warn","type":"Internal matching error","rule_id":"javascript.koa.web.cors-default-config-koa.cors-default-config-koa","message":"Internal matching error when running javascript.koa.web.cors-default-config-koa.cors-default-config-koa on /Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js:\n An error occurred while invoking the Semgrep engine. Please help us fix this by creating an issue at https://github.com/semgrep/semgrep\n\nmetavariable-name:module(s) operator is only supported in the Pro engine","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js"},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/Users/chad.parnin/repos/VulnerableApp/gradlew","start":{"line":177,"col":5,"offset":0},"end":{"line":177,"col":10,"offset":5}}]],"message":"Syntax error at line /Users/chad.parnin/repos/VulnerableApp/gradlew:177:\n `for i` was unexpected","path":"/Users/chad.parnin/repos/VulnerableApp/gradlew","spans":[{"file":"/Users/chad.parnin/repos/VulnerableApp/gradlew","start":{"line":177,"col":5,"offset":0},"end":{"line":177,"col":10,"offset":5}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java","start":{"line":41,"col":43,"offset":0},"end":{"line":41,"col":44,"offset":1}}]],"message":"Syntax error at line /Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java:41:\n `)` was unexpected","path":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java","spans":[{"file":"/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java","start":{"line":41,"col":43,"offset":0},"end":{"line":41,"col":44,"offset":1}}]}],"paths":{"scanned":["/Users/chad.parnin/repos/VulnerableApp/.classpath","/Users/chad.parnin/repos/VulnerableApp/.github/FUNDING.yml","/Users/chad.parnin/repos/VulnerableApp/.github/ISSUE_TEMPLATE/bug_report.md","/Users/chad.parnin/repos/VulnerableApp/.github/ISSUE_TEMPLATE/feature_request.md","/Users/chad.parnin/repos/VulnerableApp/.github/workflows/security-scan.yml","/Users/chad.parnin/repos/VulnerableApp/.gitignore","/Users/chad.parnin/repos/VulnerableApp/.project","/Users/chad.parnin/repos/VulnerableApp/.settings/org.eclipse.buildship.core.prefs","/Users/chad.parnin/repos/VulnerableApp/.travis.yml","/Users/chad.parnin/repos/VulnerableApp/CODE_OF_CONDUCT.md","/Users/chad.parnin/repos/VulnerableApp/CONTRIBUTING.md","/Users/chad.parnin/repos/VulnerableApp/LICENSE","/Users/chad.parnin/repos/VulnerableApp/README.md","/Users/chad.parnin/repos/VulnerableApp/build.gradle","/Users/chad.parnin/repos/VulnerableApp/docker-compose.yml","/Users/chad.parnin/repos/VulnerableApp/docs/ComponentDiagram VulnerableApp.png","/Users/chad.parnin/repos/VulnerableApp/docs/DesignDocumentation.md","/Users/chad.parnin/repos/VulnerableApp/docs/Gemfile","/Users/chad.parnin/repos/VulnerableApp/docs/HOW-TO-USE.md","/Users/chad.parnin/repos/VulnerableApp/docs/ProjectUsage.md","/Users/chad.parnin/repos/VulnerableApp/docs/ReleaseVulnerableApp.md","/Users/chad.parnin/repos/VulnerableApp/docs/Vulnerability list Description.jpg","/Users/chad.parnin/repos/VulnerableApp/docs/VulnerabilityLevel Description.jpg","/Users/chad.parnin/repos/VulnerableApp/docs/_config.yml","/Users/chad.parnin/repos/VulnerableApp/docs/_config_local.yml","/Users/chad.parnin/repos/VulnerableApp/docs/blogs/Overview_of_Owasp-VulnerableApp.md","/Users/chad.parnin/repos/VulnerableApp/docs/blogs/blogs.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/hi/README.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/locale.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/pa/README.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/pt-BR/Readme.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/ru/README.md","/Users/chad.parnin/repos/VulnerableApp/docs/i18n/zh-CN/README.md","/Users/chad.parnin/repos/VulnerableApp/docs/index.md","/Users/chad.parnin/repos/VulnerableApp/docs/logos/BW/iconColoured.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/BW/iconColoured@2x-8.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/BW/iconColoured@3x-8.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/Coloured/iconColoured.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/Coloured/iconColoured@2x-8.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/Coloured/iconColoured@3x-8.png","/Users/chad.parnin/repos/VulnerableApp/docs/logos/EPS/logoBW.eps","/Users/chad.parnin/repos/VulnerableApp/docs/logos/EPS/logoColoured.eps","/Users/chad.parnin/repos/VulnerableApp/docs/logos/SVG/logoBW.svg","/Users/chad.parnin/repos/VulnerableApp/docs/logos/SVG/logoColoured.svg","/Users/chad.parnin/repos/VulnerableApp/gradle/wrapper/gradle-wrapper.jar","/Users/chad.parnin/repos/VulnerableApp/gradle/wrapper/gradle-wrapper.properties","/Users/chad.parnin/repos/VulnerableApp/gradlew","/Users/chad.parnin/repos/VulnerableApp/gradlew.bat","/Users/chad.parnin/repos/VulnerableApp/scanner/sast/expectedIssues.csv","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/Application.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/beans/AllEndPointsResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/beans/AttackVectorResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/beans/LevelResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/beans/ScannerMetaResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/beans/ScannerResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/configuration/VulnerableAppConfiguration.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/configuration/VulnerableAppProperties.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/VulnerableAppRestController.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/exception/ControllerException.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/controller/exception/ControllerExceptionHandler.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/EnvUtils.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/FrameworkConstants.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/GenericUtils.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/JSONSerializationUtils.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/LevelConstants.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/MessageBundle.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/Variant.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/annotations/AttackVector.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/annotations/RequestParameterLocation.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/annotations/ResponseType.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRequestMapping.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/internal/utility/annotations/VulnerableAppRestController.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/IEndPointsInformationProvider.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/exception/ExceptionStatusCodeEnum.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/exception/ServiceApplicationException.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/impl/EndPointsInformationProvider.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/bean/GenericVulnerabilityResponseBean.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/commandInjection/CommandInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/PreflightController.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/fileupload/UnrestrictedFileUpload.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTTokenGenerator.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/IJWTValidator.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/JWTVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/bean/JWTUtils.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/JWTValidator.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/impl/LibBasedJWTGenerator.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/JWTAlgorithmKMS.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/KeyStrength.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/jwt/keys/SymmetricAlgorithmKey.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/openRedirect/ClientSideInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/openRedirect/Http3xxStatusCodeBasedInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/openRedirect/MetaTagBasedInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/openRedirect/RefreshHeaderBasedInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/pathTraversal/PathTraversalVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/rfi/UrlParamBasedRFI.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/BlindSQLInjectionVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/CarInformation.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/CarInformationRepository.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/ErrorBasedSQLInjectionVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/sqlInjection/UnionBasedSQLInjectionVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/MetaDataServiceMock.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/ssrf/SSRFVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PersistentXSSInHTMLTagVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/Post.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/persistent/PostRepository.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSInImgTagAttribute.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xss/reflected/XSSWithHtmlTagInjection.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xxe/XXEVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/Book.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xxe/bean/ObjectFactory.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntity.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/service/vulnerability/xxe/dao/BookEntityRepository.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/vulnerability/types/VulnerabilityType.java","/Users/chad.parnin/repos/VulnerableApp/src/main/java/org/sasanlabs/vulnerability/utils/Constants.java","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/application.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/BlindSQLInjectionVulnerabilityPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/ErrorBasedSQLInjectionPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/GeneralVulnerabilityPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/JWTVulnerabilityPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/SSRFVulnerabilityPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/UnionBasedSQLInjectionVulnerabilityPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/attackvectors/UnrestrictedFileUploadPayload.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_en_US.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_es.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_hi.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_it.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_sv.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/i18n/messages_zh_TW.properties","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/log4j2.xml","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/sampleVulnerability/SampleVulnerability.java","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sampleVulnerability/staticResources/LEVEL_1/SampleVulnerability.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/sasanlabs.p12","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/JWT/SymmetricAlgoKeys.json","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/PathTraversal/OwaspAppInfo.json","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/PathTraversal/UserInfo.json","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/PathTraversal/secret.json","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/SQLInjection/db/data.sql","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/SQLInjection/db/schema.sql","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/XXEVulnerability/books.xsd","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/XXEVulnerability/schema.sql","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/scripts/xss/PersistentXSS/db/schema.sql","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/error.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/error.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/images/GitHub-Mark-32px.png","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/images/OWASP.png","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/images/ZAP.png","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/images/cars/Audi.jpg","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/index.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/BlindSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/CommandInjection/LEVEL_1/CI_Level1.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/ErrorBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/Http3xxStatusCodeBasedInjection/LEVEL_1/Http3xxStatusCodeBasedInjection.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_1/JWT_Level1.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_2/JWT_Level2.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/LEVEL_7/JWT_Level.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/keys/private_key.pem","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/JWTVulnerability/keys/public_crt.pem","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/MetaTagBasedInjection/LEVEL_1/MetaTagBasedInjection.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PathTraversal/LEVEL_1/PathTraversal.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/PersistentXSSInHTMLTagVulnerability/LEVEL_1/PersistentXSS.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/SSRFVulnerability/LEVEL_1/SSRF.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnionBasedSQLInjectionVulnerability/LEVEL_1/SQLInjection_Level1.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/UnrestrictedFileUpload/LEVEL_1/FileUpload.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSInImgTagAttribute/LEVEL_1/XSS.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithHtmlTagInjection/LEVEL_1/XSS.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XSSWithNullBytesImgTagAttribute/LEVEL_1/XSS.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.html","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/templates/XXEVulnerability/LEVEL_1/XXE.js","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vectors/secure.svg","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vectors/unsecure.svg","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.css","/Users/chad.parnin/repos/VulnerableApp/src/main/resources/static/vulnerableApp.js"]},"time":{"rules":[],"rules_parse_time":4.813957929611206,"profiling_times":{"config_time":7.001968145370483,"core_time":7.096687078475952,"ignores_time":0.001291036605834961,"total_time":14.100545167922974},"parsing_time":{"total_time":0.0,"per_file_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"scanning_time":{"total_time":5.876924514770508,"per_file_time":{"mean":0.011046850591673886,"std_dev":0.002770347696704594},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_files":[]},"matching_time":{"total_time":0.0,"per_file_and_rule_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_files":[]},"tainting_time":{"total_time":0.0,"per_def_and_rule_time":{"mean":0.0,"std_dev":0.0},"very_slow_stats":{"time_ratio":0.0,"count_ratio":0.0},"very_slow_rules_on_defs":[]},"fixpoint_timeouts":[],"prefiltering":{"project_level_time":0.0,"file_level_time":0.0,"rules_with_project_prefilters_ratio":0.0,"rules_with_file_prefilters_ratio":0.9740370982986768,"rules_selected_ratio":0.08459357277882798,"rules_matched_ratio":0.08459357277882798},"targets":[],"total_bytes":0,"max_memory_bytes":8453676608},"engine_requested":"OSS","interfile_languages_used":[],"skipped_rules":[]}