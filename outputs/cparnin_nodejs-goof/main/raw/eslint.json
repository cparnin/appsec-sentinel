[{"filePath":"/Users/chad.parnin/repos/nodejs-goof/app.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":9,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":9,"endColumn":24,"fix":{"range":[102,105],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":10,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":10,"endColumn":32,"fix":{"range":[126,129],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'crypto' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":10,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"crypto"},"fix":{"range":[126,157],"text":""},"desc":"Remove unused variable 'crypto'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":11,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":11,"endColumn":34,"fix":{"range":[158,161],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":12,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":12,"endColumn":28,"fix":{"range":[192,195],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":13,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":13,"endColumn":28,"fix":{"range":[220,223],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":14,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":14,"endColumn":39,"fix":{"range":[248,251],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":15,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":15,"endColumn":41,"fix":{"range":[287,290],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":16,"endColumn":41,"fix":{"range":[328,331],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":17,"endColumn":49,"fix":{"range":[369,372],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":18,"endColumn":32,"fix":{"range":[418,421],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":19,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":19,"endColumn":44,"fix":{"range":[450,453],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":36,"fix":{"range":[494,497],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'optional' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":20,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"optional"},"fix":{"range":[494,529],"text":""},"desc":"Remove unused variable 'optional'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":21,"endColumn":32,"fix":{"range":[530,533],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":22,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":22,"endColumn":48,"fix":{"range":[562,565],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":23,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":23,"endColumn":39,"fix":{"range":[610,613],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'dust' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"dust"},"fix":{"range":[610,648],"text":""},"desc":"Remove unused variable 'dust'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":24,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":24,"endColumn":45,"fix":{"range":[649,652],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":25,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":25,"endColumn":35,"fix":{"range":[694,697],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":21,"fix":{"range":[757,760],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":29,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":29,"endColumn":34,"fix":{"range":[778,781],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":30,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":30,"endColumn":47,"fix":{"range":[812,815],"text":"let"}},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":79,"column":20,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":79,"endColumn":22,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[2356,2358],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":83,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":83,"endColumn":68,"fix":{"range":[2406,2409],"text":"let"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":21,"source":"/**\n * Module dependencies.\n */\n\n// mongoose setup\nrequire('./mongoose-db');\nrequire('./typeorm-db')\n\nvar st = require('st');\nvar crypto = require('crypto');\nvar express = require('express');\nvar http = require('http');\nvar path = require('path');\nvar ejsEngine = require('ejs-locals');\nvar bodyParser = require('body-parser');\nvar session = require('express-session')\nvar methodOverride = require('method-override');\nvar logger = require('morgan');\nvar errorHandler = require('errorhandler');\nvar optional = require('optional');\nvar marked = require('marked');\nvar fileUpload = require('express-fileupload');\nvar dust = require('dustjs-linkedin');\nvar dustHelpers = require('dustjs-helpers');\nvar cons = require('consolidate');\nconst hbs = require('hbs')\n\nvar app = express();\nvar routes = require('./routes');\nvar routesUsers = require('./routes/users.js')\n\n// all environments\napp.set('port', process.env.PORT || 3001);\napp.engine('ejs', ejsEngine);\napp.engine('dust', cons.dust);\napp.engine('hbs', hbs.__express);\ncons.dust.helpers = dustHelpers;\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(logger('dev'));\napp.use(methodOverride());\napp.use(session({\n  secret: 'keyboard cat',\n  name: 'connect.sid',\n  cookie: { path: '/' }\n}))\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(fileUpload());\n\n// Routes\napp.use(routes.current_user);\napp.get('/', routes.index);\napp.get('/login', routes.login);\napp.post('/login', routes.loginHandler);\napp.get('/admin', routes.isLoggedIn, routes.admin);\napp.get('/account_details', routes.isLoggedIn, routes.get_account_details);\napp.post('/account_details', routes.isLoggedIn, routes.save_account_details);\napp.get('/logout', routes.logout);\napp.post('/create', routes.create);\napp.get('/destroy/:id', routes.destroy);\napp.get('/edit/:id', routes.edit);\napp.post('/update/:id', routes.update);\napp.post('/import', routes.import);\napp.get('/about_new', routes.about_new);\napp.get('/chat', routes.chat.get);\napp.put('/chat', routes.chat.add);\napp.delete('/chat', routes.chat.delete);\napp.use('/users', routesUsers)\n\n// Static\napp.use(st({ path: './public', url: '/public' }));\n\n// Add the option to output (sanitized!) markdown\nmarked.setOptions({ sanitize: true });\napp.locals.marked = marked;\n\n// development only\nif (app.get('env') == 'development') {\n  app.use(errorHandler());\n}\n\nvar token = 'SECRET_TOKEN_f8ed84e8f41e4146403dd4a6bbcea5e418d23a9';\nconsole.log('token: ' + token);\n\nhttp.createServer(app).listen(app.get('port'), function () {\n  console.log('Express server listening on port ' + app.get('port'));\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/entity/Users.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/mongoose-db.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":1,"endColumn":36,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":30,"fix":{"range":[36,39],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":30,"fix":{"range":[66,69],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":5,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":8,"endColumn":4,"fix":{"range":[97,100],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":12,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":15,"endColumn":4,"fix":{"range":[196,199],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":64,"fix":{"range":[321,324],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":26,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":26,"endColumn":54},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":28,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":28,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used. Allowed unused args must match /^_/u.","line":52,"column":98,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":102,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1301,1307],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'count' is defined but never used. Allowed unused args must match /^_/u.","line":52,"column":104,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":109,"suggestions":[{"messageId":"removeVar","data":{"varName":"count"},"fix":{"range":[1307,1314],"text":""},"desc":"Remove unused variable 'count'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":6,"source":"var mongoose = require('mongoose');\nvar cfenv = require(\"cfenv\");\nvar Schema = mongoose.Schema;\n\nvar Todo = new Schema({\n  content: Buffer,\n  updated_at: Date,\n});\n\nmongoose.model('Todo', Todo);\n\nvar User = new Schema({\n  username: String,\n  password: String,\n});\n\nmongoose.model('User', User);\n\n// CloudFoundry env vars\nvar mongoCFUri = cfenv.getAppEnv().getServiceURL('goof-mongo');\nconsole.log(JSON.stringify(cfenv.getAppEnv()));\n\n// Default Mongo URI is local\nconst DOCKER = process.env.DOCKER\nif (DOCKER === '1') {\n  var mongoUri = 'mongodb://goof-mongo/express-todo';\n} else {\n  var mongoUri = 'mongodb://localhost/express-todo';\n}\n\n\n// CloudFoundry Mongo URI\nif (mongoCFUri) {\n  mongoUri = mongoCFUri;\n} else if (process.env.MONGOLAB_URI) {\n  // Generic (plus Heroku) env var support\n  mongoUri = process.env.MONGOLAB_URI;\n} else if (process.env.MONGODB_URI) {\n  // Generic (plus Heroku) env var support\n  mongoUri = process.env.MONGODB_URI;\n}\n\nconsole.log(\"Using Mongo URI \" + mongoUri);\n\nmongoose.connect(mongoUri);\n\nUser = mongoose.model('User');\nUser.find({ username: 'admin@snyk.io' }).exec(function (err, users) {\n  console.log(users);\n  if (users.length === 0) {\n    console.log('no admin');\n    new User({ username: 'admin@snyk.io', password: 'SuperSecretPassword' }).save(function (err, user, count) {\n      if (err) {\n        console.log('error saving admin user');\n      }\n    });\n  }\n});","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/public/js/ga.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":60,"fix":{"range":[42,45],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":16,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":72,"fix":{"range":[117,120],"text":"let"}},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":4,"column":16,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":4,"endColumn":18,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[199,201],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-undef","severity":2,"message":"'location' is not defined.","line":4,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"// Change UA-XXXXX-X to be your site's ID\nvar _gaq=[['_setAccount','UA-XXXXX-X'],['_trackPageview']];\n(function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;\ng.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';\ns.parentNode.insertBefore(g,s);}(document,'script'));","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/routes/index.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":1,"endColumn":33,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'utils' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"utils"},"fix":{"range":[0,32],"text":""},"desc":"Remove unused variable 'utils'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":36,"fix":{"range":[33,36],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":35,"fix":{"range":[69,72],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":4,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":4,"endColumn":35,"fix":{"range":[104,107],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":6,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":6,"endColumn":34,"fix":{"range":[148,151],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":7,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":24,"fix":{"range":[182,185],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":8,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":8,"endColumn":47,"fix":{"range":[206,209],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'streamBuffers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":8,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"streamBuffers"},"fix":{"range":[206,252],"text":""},"desc":"Remove unused variable 'streamBuffers'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":9,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":9,"endColumn":36,"fix":{"range":[253,256],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'readline' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":9,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"readline"},"fix":{"range":[253,288],"text":""},"desc":"Remove unused variable 'readline'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":10,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":10,"endColumn":32,"fix":{"range":[289,292],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":11,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":11,"endColumn":42,"fix":{"range":[321,324],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":12,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":12,"endColumn":38,"fix":{"range":[363,366],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":15,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":15,"endColumn":37,"fix":{"range":[414,417],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":16,"endColumn":33,"fix":{"range":[451,454],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":17,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":17,"endColumn":24,"fix":{"range":[484,487],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":27,"fix":{"range":[532,535],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[915,921],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":67,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[1747,1753],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":75,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[1920,1926],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":82,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[2072,2078],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":89,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[2317,2323],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":123,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[3392,3398],"text":""},"desc":"Remove unused variable 'next'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":131,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":131,"endColumn":16,"fix":{"range":[3529,3532],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":133,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":133,"endColumn":28,"fix":{"range":[3546,3549],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":134,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":134,"endColumn":52,"fix":{"range":[3574,3577],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":136,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":136,"endColumn":55,"fix":{"range":[3650,3653],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":139,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":139,"endColumn":28,"fix":{"range":[3742,3745],"text":"let"}},{"ruleId":"eqeqeq","severity":1,"message":"Expected '!==' and instead saw '!='.","line":145,"column":23,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":145,"endColumn":25,"fix":{"range":[3875,3877],"text":"!=="}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":155,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":155,"endColumn":31,"fix":{"range":[4061,4064],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":156,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":156,"endColumn":51,"fix":{"range":[4092,4095],"text":"let"}},{"ruleId":"eqeqeq","severity":1,"message":"Expected '===' and instead saw '=='.","line":157,"column":21,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":157,"endColumn":23,"fix":{"range":[4161,4163],"text":"==="}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":158,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":158,"endColumn":39,"fix":{"range":[4204,4207],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'count' is defined but never used. Allowed unused args must match /^_/u.","line":175,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"count"},"fix":{"range":[4589,4596],"text":""},"desc":"Remove unused variable 'count'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'todo' is defined but never used. Allowed unused args must match /^_/u.","line":194,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"todo"},"fix":{"range":[5039,5045],"text":""},"desc":"Remove unused variable 'todo'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":198,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'todo' is defined but never used. Allowed unused args must match /^_/u.","line":223,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"todo"},"fix":{"range":[5635,5641],"text":""},"desc":"Remove unused variable 'todo'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'count' is defined but never used. Allowed unused args must match /^_/u.","line":223,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"count"},"fix":{"range":[5641,5648],"text":""},"desc":"Remove unused variable 'count'."}]},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":247,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":247,"endColumn":41,"fix":{"range":[6036,6039],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":248,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":248,"endColumn":12,"fix":{"range":[6077,6080],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":249,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":249,"endColumn":52,"fix":{"range":[6089,6092],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":250,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":250,"endColumn":60,"fix":{"range":[6141,6144],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":255,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":255,"endColumn":39,"fix":{"range":[6358,6361],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":256,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":256,"endColumn":49,"fix":{"range":[6397,6400],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused args must match /^_/u.","line":261,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":13},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":267,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":267,"endColumn":32,"fix":{"range":[6705,6708],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":269,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":269,"endColumn":33,"fix":{"range":[6773,6776],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":270,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":270,"endColumn":25,"fix":{"range":[6806,6809],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":272,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":272,"endColumn":25,"fix":{"range":[6869,6872],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":273,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":273,"endColumn":27,"fix":{"range":[6894,6897],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":274,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":274,"endColumn":27,"fix":{"range":[6921,6924],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":275,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":275,"endColumn":21,"fix":{"range":[6948,6951],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":280,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":280,"endColumn":30,"fix":{"range":[7149,7152],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'count' is defined but never used. Allowed unused args must match /^_/u.","line":288,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":288,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"count"},"fix":{"range":[7372,7379],"text":""},"desc":"Remove unused variable 'count'."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":298,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":298,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[7542,7548],"text":""},"desc":"Remove unused variable 'next'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":39,"source":"var utils = require('../utils');\nvar mongoose = require('mongoose');\nvar Todo = mongoose.model('Todo');\nvar User = mongoose.model('User');\n// TODO:\nvar hms = require('humanize-ms');\nvar ms = require('ms');\nvar streamBuffers = require('stream-buffers');\nvar readline = require('readline');\nvar moment = require('moment');\nvar exec = require('child_process').exec;\nvar validator = require('validator');\n\n// zip-slip\nvar fileType = require('file-type');\nvar AdmZip = require('adm-zip');\nvar fs = require('fs');\n\n// prototype-pollution\nvar _ = require('lodash');\n\nexports.index = function (req, res, next) {\n  Todo.\n    find({}).\n    sort('-updated_at').\n    exec(function (err, todos) {\n      if (err) return next(err);\n\n      res.render('index', {\n        title: 'Patch TODO List',\n        subhead: 'Vulnerabilities at their best',\n        todos: todos,\n      });\n    });\n};\n\nexports.loginHandler = function (req, res, next) {\n  if (validator.isEmail(req.body.username)) {\n    User.find({ username: req.body.username, password: req.body.password }, function (err, users) {\n      if (users.length > 0) {\n        const redirectPage = req.body.redirectPage\n        const session = req.session\n        const username = req.body.username\n        return adminLoginSuccess(redirectPage, session, username, res)\n      } else {\n        return res.status(401).send()\n      }\n    });\n  } else {\n    return res.status(401).send()\n  }\n};\n\nfunction adminLoginSuccess(redirectPage, session, username, res) {\n  session.loggedIn = 1\n\n  // Log the login action for audit\n  console.log(`User logged in: ${username}`)\n\n  if (redirectPage) {\n      return res.redirect(redirectPage)\n  } else {\n      return res.redirect('/admin')\n  }\n}\n\nexports.login = function (req, res, next) {\n  return res.render('admin', {\n    title: 'Admin Access',\n    granted: false,\n    redirectPage: req.query.redirectPage\n  });\n};\n\nexports.admin = function (req, res, next) {\n  return res.render('admin', {\n    title: 'Admin Access Granted',\n    granted: true,\n  });\n};\n\nexports.get_account_details = function(req, res, next) {\n  // @TODO need to add a database call to get the profile from the database\n  // and provide it to the view to display\n  const profile = {}\n \treturn res.render('account.hbs', profile)\n}\n\nexports.save_account_details = function(req, res, next) {\n  // get the profile details from the JSON\n\tconst profile = req.body\n  // validate the input\n  if (validator.isEmail(profile.email, { allow_display_name: true })\n    // allow_display_name allows us to receive input as:\n    // Display Name <email-address>\n    // which we consider valid too\n    && validator.isMobilePhone(profile.phone, 'he-IL')\n    && validator.isAscii(profile.firstname)\n    && validator.isAscii(profile.lastname)\n    && validator.isAscii(profile.country)\n  ) {\n    // trim any extra spaces on the right of the name\n    profile.firstname = validator.rtrim(profile.firstname)\n    profile.lastname = validator.rtrim(profile.lastname)\n\n    // render the view\n    return res.render('account.hbs', profile)\n  } else {\n    // if input validation fails, we just render the view as is\n    console.log('error in form details')\n    return res.render('account.hbs')\n  }\n}\n\nexports.isLoggedIn = function (req, res, next) {\n  if (req.session.loggedIn === 1) {\n    return next()\n  } else {\n    return res.redirect('/')\n  }\n}\n\nexports.logout = function (req, res, next) {\n  req.session.loggedIn = 0\n  req.session.destroy(function() { \n    return res.redirect('/')  \n  })\n}\n\nfunction parse(todo) {\n  var t = todo;\n\n  var remindToken = ' in ';\n  var reminder = t.toString().indexOf(remindToken);\n  if (reminder > 0) {\n    var time = t.slice(reminder + remindToken.length);\n    time = time.replace(/\\n$/, '');\n\n    var period = hms(time);\n\n    console.log('period: ' + period);\n\n    // remove it\n    t = t.slice(0, reminder);\n    if (typeof period != 'undefined') {\n      t += ' [' + ms(period) + ']';\n    }\n  }\n  return t;\n}\n\nexports.create = function (req, res, next) {\n  // console.log('req.body: ' + JSON.stringify(req.body));\n\n  var item = req.body.content;\n  var imgRegex = /\\!\\[alt text\\]\\((http.*)\\s\\\".*/;\n  if (typeof (item) == 'string' && item.match(imgRegex)) {\n    var url = item.match(imgRegex)[1];\n    console.log('found img: ' + url);\n\n    exec('identify ' + url, function (err, stdout, stderr) {\n      console.log(err);\n      if (err !== null) {\n        console.log('Error (' + err + '):' + stderr);\n      }\n    });\n\n  } else {\n    item = parse(item);\n  }\n\n  new Todo({\n    content: item,\n    updated_at: Date.now(),\n  }).save(function (err, todo, count) {\n    if (err) return next(err);\n\n    /*\n    res.setHeader('Data', todo.content.toString('base64'));\n    res.redirect('/');\n    */\n\n    res.setHeader('Location', '/');\n    res.status(302).send(todo.content.toString('base64'));\n\n    // res.redirect('/#' + todo.content.toString('base64'));\n  });\n};\n\nexports.destroy = function (req, res, next) {\n  Todo.findById(req.params.id, function (err, todo) {\n\n    try {\n      todo.remove(function (err, todo) {\n        if (err) return next(err);\n        res.redirect('/');\n      });\n    } catch (e) {\n    }\n  });\n};\n\nexports.edit = function (req, res, next) {\n  Todo.\n    find({}).\n    sort('-updated_at').\n    exec(function (err, todos) {\n      if (err) return next(err);\n\n      res.render('edit', {\n        title: 'TODO',\n        todos: todos,\n        current: req.params.id\n      });\n    });\n};\n\nexports.update = function (req, res, next) {\n  Todo.findById(req.params.id, function (err, todo) {\n\n    todo.content = req.body.content;\n    todo.updated_at = Date.now();\n    todo.save(function (err, todo, count) {\n      if (err) return next(err);\n\n      res.redirect('/');\n    });\n  });\n};\n\n// ** express turns the cookie key to lowercase **\nexports.current_user = function (req, res, next) {\n\n  next();\n};\n\nfunction isBlank(str) {\n  return (!str || /^\\s*$/.test(str));\n}\n\nexports.import = function (req, res, next) {\n  if (!req.files) {\n    res.send('No files were uploaded.');\n    return;\n  }\n\n  var importFile = req.files.importFile;\n  var data;\n  var importedFileType = fileType(importFile.data);\n  var zipFileExt = { ext: \"zip\", mime: \"application/zip\" };\n  if (importedFileType === null) {\n    importedFileType = { ext: \"txt\", mime: \"text/plain\" };\n  }\n  if (importedFileType[\"mime\"] === zipFileExt[\"mime\"]) {\n    var zip = AdmZip(importFile.data);\n    var extracted_path = \"/tmp/extracted_files\";\n    zip.extractAllTo(extracted_path, true);\n    data = \"No backup.txt file found\";\n    fs.readFile('backup.txt', 'ascii', function (err, data) {\n      if (!err) {\n        data = data;\n      }\n    });\n  } else {\n    data = importFile.data.toString('ascii');\n  }\n  var lines = data.split('\\n');\n  lines.forEach(function (line) {\n    var parts = line.split(',');\n    var what = parts[0];\n    console.log('importing ' + what);\n    var when = parts[1];\n    var locale = parts[2];\n    var format = parts[3];\n    var item = what;\n    if (!isBlank(what)) {\n      if (!isBlank(when) && !isBlank(locale) && !isBlank(format)) {\n        console.log('setting locale ' + parts[1]);\n        moment.locale(locale);\n        var d = moment(when);\n        console.log('formatting ' + d);\n        item += ' [' + d.format(format) + ']';\n      }\n\n      new Todo({\n        content: item,\n        updated_at: Date.now(),\n      }).save(function (err, todo, count) {\n        if (err) return next(err);\n        console.log('added ' + todo);\n      });\n    }\n  });\n\n  res.redirect('/');\n};\n\nexports.about_new = function (req, res, next) {\n  console.log(JSON.stringify(req.query));\n  return res.render(\"about_new.dust\",\n    {\n      title: 'Patch TODO List',\n      subhead: 'Vulnerabilities at their best',\n      device: req.query.device\n    });\n};\n\n// Prototype Pollution\n\n///////////////////////////////////////////////////////////////////////////////\n// In order of simplicity we are not using any database. But you can write the\n// same logic using MongoDB.\nconst users = [\n  // You know password for the user.\n  { name: 'user', password: 'pwd' },\n  // You don't know password for the admin.\n  { name: 'admin', password: Math.random().toString(32), canDelete: true },\n];\n\nlet messages = [];\nlet lastId = 1;\n\nfunction findUser(auth) {\n  return users.find((u) =>\n    u.name === auth.name &&\n    u.password === auth.password);\n}\n///////////////////////////////////////////////////////////////////////////////\n\nexports.chat = {\n  get(req, res) {\n    res.send(messages);\n  },\n  add(req, res) {\n    const user = findUser(req.body.auth || {});\n\n    if (!user) {\n      res.status(403).send({ ok: false, error: 'Access denied' });\n      return;\n    }\n\n    const message = {\n      // Default message icon. Cen be overwritten by user.\n      icon: '👋',\n    };\n\n    _.merge(message, req.body.message, {\n      id: lastId++,\n      timestamp: Date.now(),\n      userName: user.name,\n    });\n\n    messages.push(message);\n    res.send({ ok: true });\n  },\n  delete(req, res) {\n    const user = findUser(req.body.auth || {});\n\n    if (!user || !user.canDelete) {\n      res.status(403).send({ ok: false, error: 'Access denied' });\n      return;\n    }\n\n    messages = messages.filter((m) => m.id !== req.body.messageId);\n    res.send({ ok: true });\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/routes/users.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":33,"fix":{"range":[1,4],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":3,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":3,"endColumn":34,"fix":{"range":[34,37],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":5,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":5,"endColumn":30,"fix":{"range":[69,72],"text":"let"}},{"ruleId":"no-unused-vars","severity":1,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"next"},"fix":{"range":[155,161],"text":""},"desc":"Remove unused variable 'next'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"\nvar express = require('express')\nvar typeorm = require(\"typeorm\");\n\nvar router = express.Router()\nmodule.exports = router\n\nrouter.get('/', async (req, res, next) => {\n\n  const mongoConnection = typeorm.getConnection('mysql')\n  const repo = mongoConnection.getRepository(\"Users\")\n\n  // hard-coded getting account id of 1\n  // as a rpelacement to getting this from the session and such\n  // (just imagine that we implemented auth, etc)\n  const results = await repo.find({ id: 1 })\n\n  // Log Object's where property for debug reasons:\n  console.log('The Object.where property is set to: ', {}.where)\n  console.log(results)\n\n  return res.json(results)\n\n})\n\nrouter.post('/', async (req, res, next) => {\n  try {\n    const mongoConnection = typeorm.getConnection('mysql')\n    const repo = mongoConnection.getRepository(\"Users\")\n\n    const user = {}\n    user.name = req.body.name\n    user.address = req.body.address\n    user.role = req.body.role\n\n    const savedRecord = await repo.save(user)\n    console.log(\"Post has been saved: \", savedRecord)\n    return res.sendStatus(200)\n\n  } catch (err) {\n    console.error(err)\n    console.log({}.where)\n    next();\n  }\n})","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/service/adminService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/tests/authentication.component.spec.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/typeorm-db.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":1,"endColumn":34,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":41,"fix":{"range":[34,37],"text":"let"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"var typeorm = require(\"typeorm\");\nvar EntitySchema = typeorm.EntitySchema;\n\nconst Users = require(\"./entity/Users\")\n\ntypeorm.createConnection({\n  name: \"mysql\",\n  type: \"mysql\",\n  host: \"localhost\",\n  port: 3306,\n  username: \"root\",\n  password: \"root\",\n  database: \"acme\",\n  synchronize: true,\n  \"logging\": true,\n  entities: [\n    new EntitySchema(Users)\n  ]\n}).then(() => {\n\n  const dbConnection = typeorm.getConnection('mysql')\n\n  const repo = dbConnection.getRepository(\"Users\")\n  return repo\n}).then((repo) => {\n\n\n  console.log('Seeding 2 users to MySQL users table: Liran (role: user), Simon (role: admin')\n  const inserts = [\n    repo.insert({\n      name: \"Liran\",\n      address: \"IL\",\n      role: \"user\"\n    }),\n    repo.insert({\n      name: \"Simon\",\n      address: \"UK\",\n      role: \"admin\"\n    })\n  ];\n\n  return Promise.all(inserts)\n}).catch((err) => {\n  console.error('failed connecting and seeding users to the MySQL database')\n  console.error(err)\n})","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]},{"filePath":"/Users/chad.parnin/repos/nodejs-goof/utils.js","messages":[{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":8,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":8,"endColumn":22,"fix":{"range":[155,158],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":9,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":9,"endColumn":84,"fix":{"range":[177,180],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":10,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":10,"endColumn":30,"fix":{"range":[261,264],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":11,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":11,"endColumn":23,"fix":{"range":[291,294],"text":"let"}},{"ruleId":"no-var","severity":1,"message":"Unexpected var, use let or const instead.","line":21,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":21,"endColumn":34,"fix":{"range":[453,456],"text":"let"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"module.exports = {\n\n  ran_no : function ( min, max ){\n    return Math.floor( Math.random() * ( max - min + 1 )) + min;\n  },\n\n  uid : function ( len ){\n    var str     = '';\n    var src     = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var src_len = src.length;\n    var i       = len;\n\n    for( ; i-- ; ){\n      str += src.charAt( this.ran_no( 0, src_len - 1 ));\n    }\n\n    return str;\n  },\n\n  forbidden : function ( res ){\n    var body       = 'Forbidden';\n    res.statusCode = 403;\n\n    res.setHeader( 'Content-Type', 'text/plain' );\n    res.setHeader( 'Content-Length', body.length );\n    res.end( body );\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":["@stylistic/no-extra-semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"11.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin","url":"https://eslint.style"},"rule":{"name":"no-extra-semi","url":"https://eslint.style/rules/no-extra-semi"}}]}}]}]